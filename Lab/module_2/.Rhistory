geometry = TRUE)
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
census_centrality <- acs2020c[bb_sf, ,op = st_within] %>%
st_join(network_char %>% st_as_sf("nodes")) %>%
group_by(GEOID) %>%
summarise(n = n(),
hhinc = mean(hhinc, na.rm = T),
pct_wh = mean(pct_wh, na.rm = T),
pct_bl = mean(pct_bl, na.rm = T),
pct_novhc = mean(pct_novhc, na.rm = T),
bc = mean(bc, na.rm = T))
census_centrality <- acs2020c[bb_sf, ,op = st_within] %>%
st_join(network_char %>% st_as_sf("nodes")) %>%
group_by(GEOID) %>%
summarise(n = n(),
hhinc = mean(hhinc, na.rm = T),
pct_wh = mean(pct_wh, na.rm = T),
pct_bl = mean(pct_bl, na.rm = T),
pct_novhc = mean(pct_novhc, na.rm = T),
bc = mean(node_bc, na.rm = T))
tm_shape(acs2020c) + tm_polygons(col = "grey", alpha = 0.5) +
tm_shape(census_centrality) + tm_polygons(col = "bc", style = "quantile") +
tm_shape(bb_sf) + tm_borders()
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = centrality, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y", labeller = var_labeller) +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
?facet_wrap
# Import required packages
library(tidytransit)
library(tidyverse)
library(tmap)
library(ggplot2)
library(gtfsrouter)
library(here)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(plotly)
library(igraph)
library(tidygraph)
library(dodgr)
library(leafsync)
source("https://raw.githubusercontent.com/BonwooKoo/gtfs_to_igraph/master/gtfs_to_igraph.R")
wd <- file.path(Sys.getenv('setwd'),"work/working/School/UA_2022/external/Lab/module_2")
setwd(eval(wd))
# This GTFS file is downloaded from
# https://opendata.atlantaregional.com/datasets/marta-gtfs-latest-feed/about
atl <- read_gtfs('MARTA_GTFS_Latest_Feed.zip')
typeof(atl)
names(atl)
print(head(atl))
atlsf <- tidytransit::gtfs_as_sf(atl, crs = 4326)
head(atlsf)
a <- leaflet(atlsf$shapes) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolylines(weight = 1, color = "red") %>%
addControl(htmltools::HTML("Route shapes"))
b <- leaflet(atlsf$stops) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircles(weight = 3, color = "red") %>%
addControl(htmltools::HTML("Stop shapes"))
leafsync::sync(a,b)
# Step 1:
stop_dist <- stop_group_distances(atlsf$stops, by='stop_name') %>%
# Step 2:
filter(dist_max > 200)
# Step 3
atl$stops <- atl$stops %>%
group_by(stop_name) %>%
mutate(stop_name = case_when(stop_name %in% stop_dist$stop_name ~ paste0(stop_name, " (", seq(1,n()), ")"),
TRUE ~ stop_name))
# Step 4
atl$transfers <- gtfsrouter::gtfs_transfer_table(atl,
d_limit = 200,
min_transfer_time = 120)
# Step 5
am_stop_time <- filter_stop_times(gtfs_obj = atl,
extract_date = "2021-08-14",
min_departure_time = 3600*7, # input unit is in second. So 3500*7 is 7AM
max_arrival_time = 3600*10)  # similarly, this is 10AM
# travel_times
trvt <- travel_times(filtered_stop_times = am_stop_time,
stop_name = "MIDTOWN STATION",
return_coords = TRUE)
trvt_pal <- colorQuantile(palette = "Reds", domain = trvt$travel_time)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircles(data = trvt %>% st_as_sf(coords = c("to_stop_lon", "to_stop_lat"), crs = 4326),
fillColor = ~trvt_pal(travel_time),
stroke = F,
radius = 300,
fillOpacity = 0.7,
popup = paste0("Travel Time from <br> <strong> MIDTOWN: ", round(trvt$travel_time/60, 2), " minutes <strong>") %>%
lapply(htmltools::HTML))
# Average time to get to other stations
print(str_c("On average, it takes ",
round(mean(trvt$travel_time)/60,1),
" minutes to travel from the Midtown Station to all other stations."))
# Filter out rail transit
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
unique_shape <- route_trip %>%
dplyr::group_by(route_id) %>%
dplyr::slice(1) %>%
dplyr::ungroup()
route.shape <- atlsf$shape %>% inner_join(unique_shape, by = "shape_id")
# Route type is not really intuitive - let's fix that
route.shape <- route.shape %>%
dplyr::mutate(route_type = dplyr::case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
pal <- leaflet::colorFactor(c("red", "orange", "pink"), domain = route.shape$route_type)
route.shape %>%
leaflet::leaflet(data = .) %>%
leaflet::addProviderTiles(providers$CartoDB.DarkMatter) %>%
leaflet::addPolylines(color = ~pal(route_type),
weight = 3,
opacity = 0.9,
popup = paste0("Route type: ", route.shape$route_type))
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE)
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 26967) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
pal <- colorFactor(palette = c("red", "yellow", "blue"), domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = MARTA_buffer_group %>% st_transform(crs = 4326), col = ~pal(route_type),
popup = MARTA_buffer_group$route_type)
# Get American Community Survey
acs2020 <- tidycensus::get_acs(geography = "tract",
variables = c("hhinc" = 'B19013_001',
"r_tot" = "B02001_001",
"r_wh" = "B02001_002",
"r_bl" = "B02001_003",
"tot_hh" = "B25044_001",
"own_novhc" = "B25044_003",
"rent_novhc" = "B25044_010"),
year = 2020,
output = "wide",
state = "GA",
county = c("Fulton", "DeKalb", "Clayton"),
geometry = TRUE)
acs2020
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
pal1 <- colorNumeric(palette = "YlOrRd", domain = acs2020c$hhinc)
pal2 <- colorFactor("Spectral", domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(group = "ACS",
data = acs2020c,
color = "grey",
fillColor = ~pal1(hhinc),
fillOpacity = 0.5,
weight = 1,
popup = leafpop::popupTable(round(st_drop_geometry(acs2020c[,c("hhinc", "pct_wh", "pct_bl")]),2))) %>%
addPolygons(group = "MARTA",
data = MARTA_buffer_group %>%
st_transform(crs = st_crs(acs2020c)),
color = ~pal2(route_type),
weight = 1,
opacity = 0.9) %>%
addLayersControl(
overlayGroups = c("ACS", "MARTA"),
options = layersControlOptions(collapsed = FALSE)
)
# Intersect buffer with tract
buffer_per_tract1 <- acs2020c %>%
st_transform(crs = 26967) %>%
st_intersection(MARTA_buffer_group) %>%
filter(route_type == "Bus") %>%
# After Intersection
mutate(subarea = unclass(st_area(.)),
pct_served1 = subarea/area1,
pct_served2 = subarea/area2) %>%
st_transform(crs = 4326)
buffer_per_tract2 <- acs2020c %>%
left_join(buffer_per_tract1 %>% select(GEOID, pct_served1) %>% st_set_geometry(NULL),
by = "GEOID") %>%
# There are many NAs in the pct_served1 column
mutate(pct_served1 = case_when(is.na(pct_served1) ~ 0,
TRUE ~ pct_served1))
pal <- colorNumeric(palette = "YlOrRd", domain = buffer_per_tract2$pct_served1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = buffer_per_tract2,
fillColor = ~pal(pct_served1), fillOpacity = 0.9,
color = "white", opacity = 0.2,
weight = 1) %>%
addLegend("bottomright",
pal = pal,
values = buffer_per_tract2$pct_served1,
title = "% Area within 400m from transit line")
# Is there any correlation between SES and service area?
var_name <- list(
'hhinc'="Annual Household Income",
'pct_bl'="% Black population",
'pct_novhc'="% Household without vehicle",
'pct_wh'="% White population",
'r_tot'="Total population",
'ln_pop_den' = "Population density"
)
var_labeller <- function(variable, value){
return(var_name[value])
}
na_index <- buffer_per_tract2 %>%
select(hhinc, r_tot, ln_pop_den, starts_with('pct')) %>%
is.na(.) %>%
apply(., 1, function(x) sum(x)==0)
buffer_per_tract2 %>%
filter(na_index) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"), names_to = "variable", values_to = "value") %>%
ggplot() +
geom_point(aes(x = pct_served1, y = value), alpha = 0.4) +
facet_wrap(~variable, scales = "free_y", labeller = var_labeller) +
labs(x = "% Area with 400m beffer from transit line") +
theme_bw()
?labellers
census_centrality
census_centrality_plot
census_centrality_plot$variable
factor(census_centrality_plot$variable)
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = centrality, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = centrality, y = value))
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
network_char %>% st_as_sf("nodes"))
network_char %>% st_as_sf("nodes")
census_centrality <- acs2020c[bb_sf, ,op = st_within] %>%
st_join(network_char %>% st_as_sf("nodes")) %>%
group_by(GEOID) %>%
summarise(n = n(),
hhinc = mean(hhinc, na.rm = T),
pct_wh = mean(pct_wh, na.rm = T),
pct_bl = mean(pct_bl, na.rm = T),
pct_novhc = mean(pct_novhc, na.rm = T),
node_bc = mean(node_bc, na.rm = T))
tm_shape(acs2020c) + tm_polygons(col = "grey", alpha = 0.5) +
tm_shape(census_centrality) + tm_polygons(col = "node_bc", style = "quantile") +
tm_shape(bb_sf) + tm_borders()
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
census_centrality_plot
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
?factor
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% Black", "% Households with no cars", "% White")))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% White", "% Black", "% No HH with no cars")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, levels = c("Household Income", "% White", "% Black", "% No HH with no cars")))
census_centrality_plot
census_centrality_plot
census_centrality_plot %>% arrange(variable)
census_centrality_plot %>% arrange(desc(variable))
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value")
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>% pull(variable)
census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>% pull(variable) %>% factor()
# Is there any correlation between SES and service area?
stop_tract_plot <- stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c('Household Income', "Population Density", "% Black",
"% No car", "% White", "Total Population")))
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
test_var <- c("hhinc", "pct_bl", "pct_wh", "pct_novhc", "r_tot", "ln_pop_den")
map_chr(test_var, function(x){
cor.object <- cor.test(buffer_per_tract2[['pct_served1']],
buffer_per_tract2[[x]])
r <- round(cor.object$estimate,3)
t <- round(cor.object$statistic,3)
p <- round(cor.object$p.value,3)
return(paste0("for ",x ,", r=", r, " (t=", t, ", p=", p, ")"))
})
service_ids <- atl$.$dates_services %>% pull(service_id)
stop_freq <- get_stop_frequency(atl, start_time = 3600*7, end_time = 10*3600, service_ids = service_ids, by_route = T)
stop_freq_sf <- atlsf$stops %>%
left_join(stop_freq, by="stop_id") %>%
filter(!is.na(n_departures))
freq_pal <- colorNumeric("Reds", stop_freq_sf$n_departures)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircles(data = stop_freq_sf,
fillColor = freq_pal(stop_freq_sf$n_departures),
fillOpacity = 0.8,
weight = 10,
stroke = FALSE,
popup = str_c(stop_freq_sf$stop_name, ": ", stop_freq_sf$n_departures)) %>%
addLegend(position = "bottomright",
pal = freq_pal,
values = stop_freq_sf$n_departures,
title = "Count of Departures <br> between 7AM and 10AM")
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
stop_tract <- acs2020c %>%
st_transform(crs = 4326) %>%
st_join(stop_freq_sf) %>%
group_by(GEOID) %>%
summarise(n_departures = sum(n_departures),
hhinc = mean(hhinc),
r_tot = mean(r_tot),
pct_wh = mean(pct_wh),
pct_bl = mean(pct_bl),
pct_novhc = mean(pct_novhc),
r_tot = mean(r_tot),
ln_pop_den = mean(ln_pop_den))
knitr::kable(head(stop_tract))
z <- function(vector){ round((vector - mean(vector))/sd(vector), 3) }
pass_per_stop_pal <- colorQuantile(palette = "Reds", domain = stop_tract$n_departures)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = stop_tract,
fillColor = pass_per_stop_pal(stop_tract$n_departures),
fillOpacity = 0.8,
color = 'grey',
weight = 1,
popup = paste0("ID: ", stop_tract$GEOID, ", Value: ", stop_tract$n_departures)) %>%
addLegend(position = "bottomright",
values = stop_tract$n_departures,
pal = pass_per_stop_pal)
message(str_c("there are ", sum(is.na(stop_tract$n_departures)), " NAs in n_departures"))
# Is there any correlation between SES and service area?
stop_tract_plot <- stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c('Household Income', "Population Density", "% Black",
"% No car", "% White", "Total Population")))
departure_count <- stop_tract_plot %>%
ggplot() +
geom_point(aes(x = n_departures, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Count of departures between 7AM and 10AM", title = "Departure Count VS. Socio-demographics") +
theme_bw()
plotly::ggplotly(departure_count)
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value")
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>% pull(variable)
stop_tract %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc', "r_tot", "ln_pop_den"),
names_to = "variable", values_to = "value") %>% pull(variable) %>% factor()
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c("Household Income", "% Black", "% No HH with no cars", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
ggplotly(centrality_plot)
