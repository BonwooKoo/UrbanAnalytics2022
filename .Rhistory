addCircles(data = network_char %>% st_as_sf("nodes"),
fillColor = ~bet_pal_node(network_char %>% st_as_sf('nodes') %>% pull(node_bc)), stroke = F, fillOpacity = 0.7,
radius = network_char %>% st_as_sf("nodes") %>% with(.$node_bc/(max(.$node_bc)/100))) # denominator is selected to make the max value roughly equal to 100
# Change crs for convenience
smoothed_net <- smoothed_net %>% st_transform(4326)
# Start point
start_p <- st_point(c(-84.40364459476174,33.776160322717544)) %>% st_sfc(crs = 4326) # CRC at Georgia Tech
# End point
target_p1 <- st_point(c(-84.37639335217811, 33.75718076235044)) %>% st_sfc(crs = 4326) # MLK National Historical Park
target_p2 <- st_point(c(-84.36498732714422, 33.753394567879816)) %>% st_sfc(crs = 4326) # Krog Street Tunnel
# Get the shortest path
paths = st_network_paths(smoothed_net, from = start_p, to = c(target_p1, target_p2), type = "shortest")
# Extract shortest path
paths_sf1 <- smoothed_net %>%
slice(paths$node_paths[[1]])
paths_sf2 <- smoothed_net %>%
slice(paths$node_paths[[2]])
# Visualize
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
# Base network in grey
addPolylines(data = smoothed_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_sf1 %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf1 %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen edges
addPolylines(data = paths_sf2 %>% st_as_sf("edges"), color = "green", weight = 4, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf2 %>% st_as_sf("nodes"), stroke = F, fillColor = "green", fillOpacity = 0.8, radius = 50)
## Assignment: sample one point from each tract, calculate average travel time from one census tract to all others. Repeat for all tracts.
## See if there is any patterns to the accessibility.
intersections <- smoothed_net %>%
st_transform(crs = 4326) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = intersections %>% st_as_sf('nodes'), fillColor = 'yellow', stroke = F, radius = 20, fillOpacity = 0.7)
atl_gtfs <- read_gtfs(here("Lab", "module_2", 'MARTA_GTFS_Latest_Feed.zip'))
atl_gtfs <- tidytransit::read_gtfs(here("Lab", "module_2", 'MARTA_GTFS_Latest_Feed.zip'))
transit <- tidytransit::read_gtfs(here("Lab", "module_2", 'MARTA_GTFS_Latest_Feed.zip')) %>%
tidytransit::gtfs_as_sf()
transit
transit$stop_times
transit$routes
rail_route <- transit$routes %>% filter(route_type %in% c(0,1,2)) %>% pull(route_id)
bus_route <- transit$routes %>% filter(route_type==3) %>% pull(route_id)
rail_route
bus_route
transit$trips %>% filter(route_id %in% rail_route)
transit$trips %>%
filter(route_id %in% rail_route)
transit$stop_times
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
with(transit$stop_times %>% filter(trip_id %in% .))
transit$trips %>%
filter(route_id %in% rail_route) %>%
transit$stop_times %>% filter(trip_id %in% .)
transit$trips %>%
filter(route_id %in% rail_route) %>%
with(transit$stop_times %>% filter(trip_id %in% .))
transit$trips %>%
filter(route_id %in% rail_route)
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
transit$stop_times %>% filter(trip_id %in% .)
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
with(transit$stop_times %>% filter(trip_id %in% .))
library(magrittr)
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %T>%
transit$stop_times %>% filter(trip_id %in% .)
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id)
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %T>%
transit$stop_times %>% filter(trip_id %in% .)
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
transit$stop_times %>% filter(trip_id %in% .)
transit$stop_times
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
filter(transit$stop_times, trip_id %in% .))
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
filter(transit$stop_times, trip_id %in% .)
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id)
transit$stop_times$trip_id
transit$stop_times
filter(transit$stop_times, stop_sequence == 1)
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
filter(transit$stop_times, trip_id %in% .)
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %>%
dplyr::filter(transit$stop_times, trip_id %in% .)
# Get stop_id for rails and buses
a <- transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id)
filter(transit$stop_times, trip_id %in% a)
# Get stop_id for rails and buses
transit$trips %>%
filter(route_id %in% rail_route) %>%
pull(trip_id) %T>%
filter(transit$stop_times, trip_id %in% .)
transit$stops
# Get stop_id for rails and buses
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "trip_id")
transit$routes
# Get stop_id for rails and buses
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id")
# Get stop_id for rails and buses
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id")
# Get stop_id for rails and buses
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id")
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id)
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>% print(n = 100, width = 10000)
# Get stop_id for rails and buses
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1)
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1)
transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1) %>% tm_shape(.) + tm_dots()
bus_stops <- transit$routes %>%
filter(route_type %in% c(3)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1) %>%
pull(stop_id)
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots()
# Get stop_id for rails and buses
rail_stops <- transit$routes %>%
filter(route_type %in% c(0,1,2)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1) %>%
pull(stop_id)
bus_stops <- transit$routes %>%
filter(route_type %in% c(3)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1) %>%
pull(stop_id)
bus_stops <- transit$routes %>%
filter(route_type %in% c(3)) %>%
inner_join(transit$trips, by = "route_id") %>%
inner_join(transit$stop_times, by = "trip_id") %>%
inner_join(transit$stops, by = "stop_id") %>%
group_by(stop_id) %>%
slice(1) %>%
pull(stop_id)
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots()
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red") +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray")
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red") +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.1)
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red") +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.01)
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red") +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.001)
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red") +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.001, alpha = 0.3)
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.001, alpha = 0.3) +
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red")
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.01, alpha = 0.3) +
tm_shape(transit$stops %>% filter(stop_id %in% rail_stops)) + tm_dots(col = "red")
load(here("Lab", "module_2", "network_char.RData"))
network_char
network_char %>% st_as_sf("nodes") %>% tm_shape(.) + tm_dots()
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.01, alpha = 0.3) +
tm_shape(transit$stops %>% filter(stop_id %in% bus_stops)) + tm_dots(col = "gray", size=0.01, alpha = 0.3)
# Using the full network file
atl_net <- osm_road %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(., sfnetworks::to_spatial_subdivision) %>%
convert(., sfnetworks::to_spatial_smooth)
osm_road
# Using the full network file
atl_net <- osm_road %>%
sfnetworks::as_sfnetwork(directed = FALSE) %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(., sfnetworks::to_spatial_subdivision) %>%
convert(., sfnetworks::to_spatial_smooth)
osm_road %>%
sfnetworks::as_sfnetwork(directed = FALSE)
osm_road %>%
sfnetworks::as_sfnetwork(directed = FALSE) %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop())
osm_road$osm_multilines
# Using the full network file
atl_net <- osm_road$osm_lines %>%
sfnetworks::as_sfnetwork(directed = FALSE) %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(., sfnetworks::to_spatial_subdivision) %>%
convert(., sfnetworks::to_spatial_smooth)
atl_net
rail_stops
# End point
rail_stops_point <- transit$stops %>% filter(stop_id %in% rail_stops)
rail_stops_point
# End point
rail_stops_point <- transit$stops %>% filter(stop_id %in% rail_stops) %>% st_geometry()
# Get the shortest path
paths = st_network_paths(atl_net, from = start_p, to = rail_stops_point, type = "shortest")
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326)
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326)
# Start point
start_p <- st_point(c(-84.40364459476174,33.776160322717544)) %>% st_sfc(crs = 4326) # CRC at Georgia Tech
# End point
rail_stops_point <- transit$stops %>% filter(stop_id %in% rail_stops) %>% st_geometry()
rail_stops_point
# Get the shortest path
paths = st_network_paths(atl_net, from = start_p, to = rail_stops_point, type = "shortest")
paths
atl_net
atl_net %>% st_as_sf("edges") %>% head()
atl_net %>% st_as_sf("edges") %>% head() %>% print(width = 1000)
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326) %>% activate("edges") %>% mutate(length = st_length() %>% unclass)
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326) %>% activate("edges") %>% mutate(weight = edge_length())
atl_net %>% st_as_sf("edges") %>% pull(weight)
atl_net %>% slice(paths$node_paths[[1]])
# Find the shortest
atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges") %>% pull(length) %>% sum()
atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges") %>% pull(length)
atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges")
a <- atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges")
a$maxlength
atl_net %>% activate('edges') %>% pull(length)
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326) %>% activate("edges") %>% mutate(length = edge_length())
atl_net %>% activate('edges')
atl_net %>% st_as_sf('edges') %>% pull(length)
atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges") %>% pull(length)
atl_net %>% slice(paths$node_paths[[1]]) %>% st_as_sf("edges") %>% pull(length) %>% sum()
# Find the shortest
path_dist <- vector("list", nrow(path))
# Find the shortest
path_dist <- vector("list", nrow(paths))
path_dist
# Find the shortest
dist_all <- map(1:nrow(paths), function(x){
atl_net %>% slice(paths$node_paths[[x]]) %>% st_as_sf("edges") %>% pull(length) %>% sum()
})
dist_all
dist_all %>% bind_rows()
dist_all %>% unlist
which.min(c(5,3,56,6,7,2,4,0,3,5,6,))
which.min(c(5,3,56,6,7,2,4,0,3,5,6,3))
c(5,3,56,6,7,2,4,0,3,5,6,3)[which.min(c(5,3,56,6,7,2,4,0,3,5,6,3))]
# Find the smallest one
closest_index <- which.min(dist_all %>% unlist)
closest_index
# Extract shortest path
paths_closest <- atl_net %>%
slice(paths$node_paths[[closest_index]])
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50)
paths_closest
closest_index
paths
paths$node_paths[88]
paths$node_paths[1]
paths$node_paths[2]
paths$node_paths[3]
paths$node_paths[4]
paths$node_paths[90]
paths$node_paths[89]
paths$node_paths[88]
dist_all
dist_all
dist_all <- dist_all %>% unlist
dist_all
# Drop zeros
dist_all <- dist_all[dist_all>0]
?which.min
# Replace zeros with a large values
dist_all[dist_all == 0] <- max(dist_all)
dist_all
# Find the smallest one
closest_index <- which.min(dist_all)
# Extract shortest path
paths_closest <- atl_net %>%
slice(paths$node_paths[[closest_index]])
# Extract shortest path
paths_closest <- atl_net %>%
slice(paths$node_paths[[closest_index]])
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50)
closest_index
paths$node_paths[49]
paths$node_paths
paths$node_paths[[49]]
# Extract shortest path
paths_closest <- atl_net %>%
slice(paths$node_paths[[closest_index]])
paths_closest
# Extract shortest path
paths_closest <- atl_net %>%
activate("nodes") %>%
slice(paths$node_paths[[closest_index]])
paths_closest
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50)
rail_stops_point
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) +
# Chosen station
addCircles(data = transit$stops %>% filter(stop_id %in% rail_stops) %>% slice(closest_index))
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen station
addCircles(data = transit$stops %>% filter(stop_id %in% rail_stops) %>% slice(closest_index))
# Change crs for convenience
atl_net <- atl_net %>% st_transform(4326) %>% activate("edges") %>% mutate(length = edge_length())
# Start point
start_p <- st_point(c(-84.40541505942419, 33.85097957563499)) %>% st_sfc(crs = 4326) # Some random residential location
# End point
rail_stops_point <- transit$stops %>% filter(stop_id %in% rail_stops) %>% st_geometry()
# Get the shortest path
paths = st_network_paths(atl_net, from = start_p, to = rail_stops_point, type = "shortest")
# Find the distances
dist_all <- map_dbl(1:nrow(paths), function(x){
atl_net %>% slice(paths$node_paths[[x]]) %>% st_as_sf("edges") %>% pull(length) %>% sum()
}) %>% unlist()
# Replace zeros with a large values
dist_all[dist_all == 0] <- max(dist_all)
# Find the smallest one
closest_index <- which.min(dist_all)
# Extract shortest path
paths_closest <- atl_net %>%
activate("nodes") %>%
slice(paths$node_paths[[closest_index]])
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen station
addCircleMarkers(data = transit$stops %>% filter(stop_id %in% rail_stops) %>% slice(closest_index), fillColor = "blue", radius = 300)
# Visualize it
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
# Base network in grey
addPolylines(data = atl_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_closest %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_closest %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen station
addCircles(data = transit$stops %>% filter(stop_id %in% rail_stops) %>% slice(closest_index), fillColor = "blue", radius = 300)
library(tidyverse)
library(tmap)
library(ggplot2)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(leafsync)
library(dbscan)
library(sfnetworks)
library(tigris)
library(tidygraph)
library(plotly)
library(osmdata)
library(here)
library(tidytransit)
library(units)
library(leaflet)
library(tidycensus)
library(leafsync)
epsg <- 4326
# Census API key
census_api_key(Sys.getenv('census_api'))
# Get ACS
census <- tidycensus::get_acs(geography = "tract",
variables = c("hhinc" = 'B19013_001',
"r_tot" = "B02001_001",
"r_wh" = "B02001_002",
"r_bl" = "B02001_003",
"tot_hh" = "B25044_001",
"own_novhc" = "B25044_003",
"rent_novhc" = "B25044_010"),
year = 2020,
output = "wide",
state = "GA",
county = c("Fulton", "DeKalb", "Clayton"),
geometry = TRUE) %>%
st_transform(crs = epsg) %>%
separate(col = NAME, into = c("tract", "county", "state"), sep = ", ")
# GTFS
gtfs <- tidytransit::read_gtfs("D:/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_2/MARTA_GTFS_Latest_Feed.zip")
