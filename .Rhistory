tt(0,8,50)*150,
tt(0,8,50)*150,
tt(0,2,24)*150
)
library(tidyverse)
tt <- function(h, m, s){
return(h*3600 + m*60 + s)
}
tt <- function(h, m, s){
return(h*3600 + m*60 + s)
}
tt
audf <- data.frame(au = au,
playtime_s = c(rep(tt(3,22,27),14), tt(1,54,02)))
audf <- data.frame(au = au,
playtime_s = c(rep(tt(3,22,47),14), tt(1,54,02)))
vid <- c(
tt(0,8,50)*150,
tt(0,8,50)*150,
tt(0,2,24)*150
)
audf <- data.frame(au = au,
playtime_s = c(rep(tt(3,22,47),14), tt(1,54,02)))
audf
vid
audf
audf <- data.frame(au = au,
playtime_s = c(rep(tt(3,22,47),14), tt(1,54,02))) %>%
mutate(cumsum = cumsum(playtime_s))
audf
vid_target <- function(vid_n, h, m, s){
return(sum(vid[vid_n], tt(h,m,s)*150))
}
vid_target
1:1
# If 2nd vid, 4minute --------
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n], tt(h,m,s)*150))
}
vid_target(2, 0,3,2)
vid
# If 2nd vid, 4minute --------
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
vid_target(2, 0,2,2)
# If 2nd vid, 4 minute 7 second --------
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
(audio_target <- nrow(audf) - sum(cumsum(audf$playtime_s) > vid_target(2,0,4,7)) + 1)
audf$cumsum
vid_target
audf$cumsum
audf$cumsum > vid_target(2,0,4,7)
isFALSE(audf$cumsum > vid_target(2,0,4,7) + )
isFALSE(audf$cumsum > vid_target(2,0,4,7))
audf$cumsum > vid_target(2,0,4,7)
# If 2nd vid, 4 minute 7 second --------
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
(audio_target <- nrow(audf) - sum(audf$cumsum) > vid_target(2,0,4,7)) + 1)
audio_target <- nrow(audf) - sum(audf$cumsum) > vid_target(2,0,4,7) + 1
audio_target
audio_target <- nrow(audf) - sum(audf$cumsum) > vid_target(2,0,4,7)
audio_target
audf$cumsum
audf$cumsum > vid_target(2,0,4,7)
sum(audf$cumsum > vid_target(2,0,4,7))
nrow(audf)
nrow(audf) - sum(audf$cumsum > vid_target(2,0,4,7))
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target(2,0,4,7)) + 1
audio_target
# Target scene translated into real world's elapsed time
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
audit_target <- function(vid_n, h, m, s){
# Target scene translated into real world's elapsed time
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target(2,0,4,7)) + 1
}
audio_target
audf[1:audio_target-1,]
audf[1:audio_target-1,] %>% sum(.$cumsum)
audf[1:audio_target-1,] %>% with(sum(.$cumsum))
audf[1:audio_target-1,]
audf[1:audio_target-1,] %>% .$cumsum
sum(audf[1:audio_target-1,] %>% .$cumsum)
remaining_sec <- vid_target - elapsed_in_audio
remaining_sec
# where in that audio file does this scene exist?
elapsed_in_audio <- audf[1:audio_target-1,] %>% with(sum(.$cumsum))
remaining_sec <- vid_target - elapsed_in_audio
elapsed_in_audio
vid_target
vid_target <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
vid_time <- function(vid_n, h, m, s){
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
vid_target
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_time) + 1
audio_target
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_time) + 1
vid_time
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
audio_target
# where in that audio file does this scene exist?
elapsed_in_audio <- audf[1:audio_target-1,] %>% with(sum(.$cumsum))
elapsed_in_audio
remaining_sec <- vid_target - elapsed_in_audio
remaining_sec
vid_target
elapsed_in_audio
remaining_sec <- vid_target - elapsed_in_audio
remaining_sec
elapsed_in_audio
vid_target
audio_target
audf[1:audio_target-1,]
vid_target
elapsed_in_audio
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1)
elapsed_in_audio
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
elapsed_in_audio
remaining_sec <- vid_target - elapsed_in_audio
remaining_sec
vid_time <- function(vid_n, h, m, s){
# Given the targetted scene in video file,
# This function returns the elapsed time in real world in second unit.
return(sum(vid[1:vid_n-1], tt(h,m,s)*150))
}
sec <- 7047
sec %/% 3600
h <- sec %/% 3600
h
h <- sec %/% 3600
(sec - h*3600)
(sec - h*3600) %/% 60
m <- (sec - h*3600) %/% 60
m
(sec - h*3600 - m*60)
sec_to_hms <- function(sec){
h <- sec %/% 3600
m <- (sec - h*3600) %/% 60
s <- sec - h*3600 - m*60
return(sprintf("h: %s, m: %s, s:%s", h, m, s))
}
sec_to_hms(7047)
sec_to_hms <- function(sec){
sec_to_hms <- function(sec){
h <- sec %/% 3600
m <- (sec - h*3600) %/% 60
s <- sec - h*3600 - m*60
return(sprintf("h:%s     m:%s     s:%s", h, m, s))
}
audit_target <- function(vid_n, h, m, s){
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
remaining_sec <- vid_target - elapsed_in_audio
# seconds in h,m,s
return(sec_to_hms(remaining_sec))
}
audit_target(vid_n = 2,h = 0,m = 4, s= 7)
audit_target(vid_n = 2,h = 0,m = 4, s = 7)
audit_target <- function(vid_n, h, m, s){
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
remaining_sec <- vid_target - elapsed_in_audio
# seconds in h,m,s
return(sec_to_hms(remaining_sec))
}
sec_to_hms <- function(sec){
# Given time in second, this function returns h:m:s format
h <- sec %/% 3600
m <- (sec - h*3600) %/% 60
s <- sec - h*3600 - m*60
return(sprintf("h:%s     m:%s     s:%s", h, m, s))
}
audit_target <- function(vid_n, h, m, s){
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
remaining_sec <- vid_target - elapsed_in_audio
# seconds in h,m,s
return(sec_to_hms(remaining_sec))
}
audit_target(vid_n = 2, h = 0, m = 4, s = 7)
audio_target
audit_target <- function(vid_n, h, m, s){
# Given where in the video the scene we look for is,
# this function returns
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
remaining_sec <- vid_target - elapsed_in_audio
# seconds in h,m,s
where_audio <- sec_to_hms(remaining_sec)
return(paste0("Audio File: %c -> ", audf$au[audio_target], " ",
where_audio))
}
audit_target(vid_n = 2, h = 0, m = 4, s = 7)
audit_target <- function(vid_n, h, m, s){
# Given where in the video the scene we look for is,
# this function returns
# Target scene translated into real world's elapsed time
vid_target <- vid_time(2,0,4,7)
# Which audio file does this scene exist?
audio_target <- nrow(audf) - sum(audf$cumsum > vid_target) + 1
# where in that audio file does this scene exist?
elapsed_in_audio <- audf %>% slice(audio_target-1) %>% pull(cumsum)
remaining_sec <- vid_target - elapsed_in_audio
# seconds in h,m,s
where_audio <- sec_to_hms(remaining_sec)
return(paste0("Audio File:", audf$au[audio_target], "    ",
where_audio))
}
audit_target(vid_n = 2, h = 0, m = 4, s = 7)
xaringan:::inf_mr()
getwd()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
5/3
7%%2
-21 %% 5
-21 %% 4
-21 %% 5
8%/%3
my_df[my_df$hhincome>104265, ]
my_df[my_df$hhincome>=100000, ]
my_df %>% summary()
my_df[NA,]
my_df %>% as.data.frame() %>% .[NA,]
xaringan:::inf_mr()
xaringan:::inf_mr()
1 %notin% c(1,2,3)
1 %in% c(1,2,3)
five_point
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") %>% st_set_crs(crs = 4326)
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") %>% st_set_crs(crs = 4326)
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") %>% st_set_crs(4326)
five_point
census[five_point, , op = st_intersects]
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
census <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/testdata.geojson")
marta <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/MARTA_Routes.geojson")
five_point <- sf::st_read("https://raw.githubusercontent.com/BonwooKoo/UrbanAnalytics2022/main/Lab/module_0/five_point.geojson") %>% st_transform(crs = 26967)
census %>% print()
census %>% st_geometry()
census %>% st_coordinates()
library(tmap)
tmap_mode('view')
tm_shape(census) + tm_polygons(col="hhincome")
census %>%
select(county, hhincome) %>%
filter(county %in% c("Clayton County", "Fulton County")) %>%
group_by(county) %>%
summarise(count = n(),
med.income = median(hhincome, na.rm = TRUE))
fp.buffer <- suppressWarnings(five_point %>% st_buffer(dist = 10000))
# Visualization
leaflet(height=330, width="100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = census, weight=1, color="grey") %>%
addPolygons(data = fp.buffer, weight=1) %>%
addLegend("bottomright",
colors = c("blue", "grey"),
labels = c("five_point",
"poly"),
title="Legend")
# Subsetting
census.subset <- census[five_point, , op = st_intersects]
five_point
fp.buffer <- suppressWarnings(five_point %>% st_buffer(dist = 10000))
# Visualization
leaflet(height=330, width="100%") %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = census, weight=1, color="grey") %>%
addPolygons(data = fp.buffer, weight=1) %>%
addLegend("bottomright",
colors = c("blue", "grey"),
labels = c("five_point",
"poly"),
title="Legend")
# Subsetting
census.subset <- census[five_point, , op = st_intersects]
# Visualization
tm_shape(census.subset) + tm_polygons() +
tm_shape(five_point) + tm_borders(col = "Blue")
# Visualization
tm_shape(census.subset) + tm_polygons() +
tm_shape(five_point) + tm_borders(col = "blue")
marta
buf <- marta %>% st_buffer(dist = units::set_units(5000, "m"))
buf_int_census <- buf %>% st_intersection(census)
buf <- marta %>% st_buffer(dist = units::set_units(5000, "m"))
buf_int_census <- buf %>% st_intersection(census)
tm_shape(buf) + tm_polygons()+
tm_shape(buf_int_census) + tm_polygons()
tm_shape(buf) + tm_polygons()+
tm_shape(buf_int_census) + tm_polygons() +
tm_shape(marta) + tm_lines(col = "gray") +
tm_shape(census) + tm_polygons(col = "gray")
?tm_lines
for (i in 1:5){
print(i)
}
range(1,5)
for (i in seq_along(5)){
print(i + 2)
}
for (i in seq_along(5)){
print(i + 2)
}
seq_along(5)
for (i in 1:5){
print(i + 2)
}
n <- 0
while (n < 5):
n <- 0
while (n < 5){
print(n)
n <- n + 1
}
aa <- data.frame(a = rnorm(100), b = rnorm(100))
a
aa
lappy(a, mean)
lapply(a, mean)
a
lapply(aa, mean)
mean(aa$a)
xaringan:::inf_mr()
knitr::opts_chunk$set(echo = TRUE)
#### Tract polygons for the center of Yelp querry
census_api_key(Sys.getenv("yelp_api"))
#### Tract polygons for the center of Yelp querry
census_api_key(Sys.getenv("census_api"))
tract <- get_acs(geography = "tract",
state = "GA",
county = c("Fulton", "Dekalb"),
variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003'
),
year = 2019,
survey = "acs5",
geometry = TRUE,
output = "wide") %>%
select(geo.id = GEOID,
hhincome = hhincomeE,
race.tot = race.totE,
race.white = race.whiteE,
race.black = race.blackE)
xaringan:::inf_mr()
xaringan:::inf_mr()
sum
mutate
?plyr::a_ply
n <- 5
sample(c(0,1), n, replace=TRUE)
n <- 5
cumsum(sample(c(0,1), n, replace=TRUE))
sample(c(0,1), n, replace=TRUE)
sample(c(0,1), n, replace=TRUE)
sample(c(0,1), n, replace=TRUE)
sample(c(0,1), n, replace=TRUE)
sample(c(0,1), n, replace=TRUE)
cumsum(sample(c(0,1), n, replace=TRUE))
cumsum(sample(c(0,1), n, replace=TRUE))
cumsum(sample(c(0,1), n, replace=TRUE))
step <- 100
cumsum(sample(c(0,1), n, replace=TRUE))
seq(step,n, by=step)
seq(100,5,by=100)
?seq
coin_toss <- function(n, step=100) {
# Record number of heads at each step
tosses <- cumsum(sample(c(0,1), n, replace=TRUE))
# Define steps for summaries
steps <- seq(step,n, by=step)
# Compute summaries
cbind(tosses[steps] / steps - .5, tosses[steps] - steps/2)
}
View(coin_toss)
coin_toss(5)
seq(1,100,2)
seq(1,100,by=2)
seq(1,100,by=100)
seq(100,5)
seq(100,5,by=100)
seq(100,5,by=-1)
?tapply
?mean
a <- seq(1,10)
mean(a)
mean(a, trim=0.1)
mean(a, trim=0.2)
mean(a, trim=1)
rcauchy(10)
rcauchy(10)
?stopifnot
xaringan:::inf_mr()
library(here)
here()
list.files()
getwd()
f1 <- file.path(file_path,'roster.csv')
f2 <- file.path(file_path,'topic.csv')
file_path <- "C:/Users/bkoo34/Dropbox (GaTech)/Work/Working/School/UA_2022/internal"
f1 <- file.path(file_path,'roster.csv')
f2 <- file.path(file_path,'topic.csv')
f1
f1 <- read_csv(file.path(file_path,'roster.csv'))
f2 <- read_csv(file.path(file_path,'topic.csv'))
f
f1
f2
f1
f1 <- read_csv(file.path(file_path,'roster.csv')) %>% filter(!Name %in% c("Koo, Bon Woo", "Guhathakurta, Subhrajit"))
f1
topic <- read_csv(file.path(file_path,'topic.csv'))
topic
roster
roster
roster <- read_csv(file.path(file_path,'roster.csv')) %>% filter(!Name %in% c("Koo, Bon Woo", "Guhathakurta, Subhrajit"))
roster
roster <- roster %>%
mutate(lastname = unlist(strsplit(Name, ", "))[1],
firstname = unlist(strsplit(Name, ", "))[2])
roster
strsplit_vec <- Vectorize(strsplit)
strsplit_vec
roster <- roster %>%
mutate(lastname = unlist(strsplit_vec(Name, ", "))[1],
firstname = unlist(strsplit_vec(Name, ", "))[2])
roster
?strsplit
strsplit_vec <- Vectorize(strsplit, vectorize.args = "x")
strsplit_vec
roster <- roster %>%
mutate(lastname = unlist(strsplit_vec(Name, ", "))[1],
firstname = unlist(strsplit_vec(Name, ", "))[2])
roster
strsplit_vec(roster$Name)
strsplit_vec(roster$Name, ", ")
strsplit(roster$Name, ", ")
unlist(strsplit(roster$Name, ", "))
?Vectorize
?str_split
str_split(roster$Name, ",")
str_split_fixed(roster$Name, ",")
str_split(roster$Name, ",")
roster <- roster %>%
mutate(lastname = unlist(str_split(Name, ", "))[1],
firstname = unlist(str_split(Name, ", "))[2])
roster
roster <- roster %>%
mutate(lastname = str_split(Name, ", ")[1],
firstname = str_split(Name, ", ")[2])
roster
roster$lastname
last_name <- map(roster$Name, ~unlist(str_split(.x, ", "))[1])
last_name
first_name <- map(roster$Name, ~unlist(str_split(.x, ", "))[2])
first_name
topic
full_name <- paste(last_name, first_name, sep = " ")
full_name
full_name
19/5
