location <- paste0(iterrow$Y %>% round(4), ",", iterrow$X %>% round(4))
heading <- iterrow$azi %>% round(1)
edge_id <- iterrow$edge_id
node_id <- iterrow$node_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-nid_{node_id}-eid_{edge_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("D:/Dropbox (GaTech)/Work/Working/School/UA_2022/internal/Assignment_answer/major_2/downloaded_image", fname)
if (!file.exists(fpath)){
download.file(furl, fpath, mode = 'wb')
}
}
# Loop!
for (i in seq(1,nrow(endp))){
get_image(endp[i,])
}
# Download the output from the computer vision models
pspnet <- read.csv(here("Lab", "Module_3", "seg_output.csv"))
library(tidyverse)
library(osmdata)
library(sfnetworks)
library(units)
library(sf)
library(tidygraph)
library(tmap)
library(here)
# Download images
edges_gt <- st_read(here("Lab", "module_3", "endp_atlantic_station.geojson"))
here()
# Download images
edges_gt <- st_read(here("external","Lab", "module_3", "endp_atlantic_station.geojson"))
# Download the output from the computer vision models
pspnet <- read.csv(here("Lab", "Module_3", "seg_output.csv"))
# Download the output from the computer vision models
pspnet <- read.csv(here("external","Lab", "Module_3", "seg_output.csv"))
# Join them back to the template used to download images
pspnet_nodes <- endp %>% inner_join(pspnet, by="node_id")
# Map!
tm_shape(pspnet_nodes %>%
mutate(pct_tree = tree/(640*640))) +
tm_dots(col = "pct_tree", style="quantile")
pspnet_nodes
endp
# Join them back to the template used to download images
pspnet_nodes <- edges_gt %>% inner_join(pspnet, by="node_id")
pspnet_nodes
# Map!
tm_shape(pspnet_nodes %>%
mutate(pct_tree = tree/(640*640))) +
tm_dots(col = "pct_tree", style="quantile")
nrow(edges_gt)
nrow(edges_gt)/2
edges_gt %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
tm_shape(.) + tm_dots(col = "type")
edges_gt %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
group_by(type) +
summarise(building = mean(building))
pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
group_by(type) +
summarise(building = mean(building))
pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second"))
pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
group_by(type) %>%
summarise(building = mean(building))
pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
group_by(type) %>%
summarise(building = mean(building),
tree = mean(tree))
compare_df <- pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second")) %>%
group_by(type) %>%
summarise(building = mean(building),
tree = mean(tree))
compare_df <- pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second"))
compare_df <- pspnet_nodes %>%
mutate(type = case_when(rownames(.) < 163 ~ "first",
TRUE ~ "second"))
compare_df %>%
group_by(type) %>%
summarise(across(c("building", "tree", "road", "sidewalk", "sky"), mean))
compare_df %>%
ggplot() +
geom_boxplot(mapping = aes(x = type, y = building))
compare_df %>%
pivot_longer(cols = c(building, sky, tree, road, sidewalk), names_to = 'variable', values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = type, y = value)) +
facet_wrap(~variable)
compare_df %>%
pivot_longer(cols = c(building, sky, tree, road, sidewalk), names_to = 'variable', values_to = "value") %>%
ggplot() +
geom_boxplot(mapping = aes(x = type, y = value)) +
facet_wrap(~variable, scales = "free_y")
compare_df %>%
group_by(type) %>%
nest()
compare_df %>%
group_by(type) %>%
nest() %>%
t()
tt <- t.test(rnorm(10), rnorm(10))
str(tt)
tt
compare_df %>%
group_by(type) %>%
nest()
compare_df %>%
group_by(type) %>%
nest() %>%
t()
compare_df %>%
group_by(type) %>%
nest()
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest()
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data)
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data) %>%
mutate(t = t.test(unlist(first), unlist(second))$statistic)
compare_df
compare_df %>%
st_drop_geometry()
compare_df %>%
st_drop_geometry() %>% select(building)
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data) %>%
mutate(t = t.test(unlist(.$first), unlist(.$second))$statistic)
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data) %>%
mutate(t = t.test(unlist(.$first), unlist(.$second)))
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data) %>%
mutate(t = cor.test(unlist(.$first), unlist(.$second)))
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data)
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>%
pivot_wider(names_from = type, values_from = data) %>% unlist(.$first)
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest()
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest() %>% .$data
compare_df %>%
st_drop_geometry() %>%
group_by(type) %>%
nest()
compare_df %>%
st_drop_geometry()
compare_df %>%
select(building, sky, tree, road, sidewalk) %>%
st_drop_geometry()
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry()
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type, building) %>%
nest()
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type, building) %>%
mutate(building = list(building))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type, building) %>%
summarise(building = list(building))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(building = list(building))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(names_from = type, values_from = c(building, sky, tree, road, sidewalk))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(names_from = type))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list))
?pivot_wider
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(names_to=variable, values_to = value)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) t
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>% t
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(names_from = type)
?pivot_wider
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(names_from = type, values_from = building:sidewalk)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(id_cols = names(.),names_from = type, values_from = building:sidewalk)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_wider(names_from = type, values_from = building:sidewalk)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list))
?pivot_longer
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk, names_to = variable, values_to = value)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
group_by(type) %>%
pivot_longer(cols = building:sidewalk)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value)
str(t.test(rnorm(10), rnorm(10)))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
mutate(t = t.test(unlist(first), unlist(second))$statistics)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
mutate(t = t.test(unlist(first), unlist(second))$statistic)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
ungroup() %>%
mutate(t = t.test(unlist(first), unlist(second))$statistic)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
ungroup() %>% .$first
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
ungroup() %>%
mutate(t = t.test(unlist(.$first), unlist(.$second))$statistic)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
rowwise() %>%
mutate(t = t.test(unlist(.$first), unlist(.$second))$statistic)
t_df <- compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value)
t_df
t_df[1,"first"]
t_df[1,"first"] %>% unlist()
t_df[2,"first"] %>% unlist()
t_df
t_df %>%
mutate(tt = unlist(first))
t_df %>%
mutate(tt = t.test(unlist(first), unlist(second)))
t_df %>%
mutate(tt = t.test(unlist(first), unlist(second))$statistic)
t_df %>%
mutate(tt = mapUt.test(unlist(first), unlist(second)))$statistic)
t_df %>%
mutate(tt = map(t.test(unlist(first), unlist(second))$statistic))
t_df <- compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>%
mutate(test = t.test(first, second)$statistic)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>% with(unlist(.$first))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>% with(.$first)
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>% with(unlist(.$first))
compare_df %>%
select(type, building, sky, tree, road, sidewalk) %>%
st_drop_geometry() %>%
group_by(type) %>%
summarise(across(c(building, sky, tree, road, sidewalk), list)) %>%
pivot_longer(cols = building:sidewalk) %>%
pivot_wider(names_from=type, values_from=value) %>% with(.$first)
here()
library(here)
# Package names
packages <- c("rtweet", "ggplot2", "dplyr", "tidytext", "tidyverse", "igraph", "ggraph", "tidyr", "wordcloud2", "textdata")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
# Package names
packages <- c("rtweet", "ggplot2", "dplyr", "tidytext", "tidyverse", "igraph", "ggraph", "tidyr", "wordcloud2", "textdata")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Load packages
invisible(lapply(packages, library, character.only = TRUE))
# whatever name you assigned to your created app
appname <- "UrbanAnalytics_tutorial"
# create token named "twitter_token"
# the keys used should be replaced by your own keys obtained by creating the app
twitter_token <- create_token(
app = appname,
consumer_key = Sys.getenv("twitter_key"),
consumer_secret = Sys.getenv("twitter_key_secret"),
access_token = Sys.getenv("twitter_access_token"),
access_secret = Sys.getenv("twitter_access_token_secret"))
#get/search tweets with any words and hashtags
#as an example 'piedmont park' is used which is save under the data frame name - 'park_tweets'
#'search_tweets'- is the function of 'rtweet' library
#q is the words/hashtags used to search tweets; n is the number of tweets to download at a time. Here it is 100.
gt_tweets_all <- search_tweets(q = "Georgia Tech", n = 200)
# When were these tweet made?
gt_tweets_all %>%
ggplot(data = .) +
geom_histogram(mapping = aes(x = created_at), color="gray") +
scale_x_datetime(date_labels = " %H:%M on %b %d")
#For something more managable:
gt_tweets <- gt_tweets_all[, sapply(gt_tweets_all, Negate(anyNA))]
#show headers of the tweets downloaded from piedmont park
head(gt_tweets, n = 5)
#unique screen_name and location of those who tweeted about Georga Tech
users <- gt_tweets %>%
select(screen_name, location) %>%
group_by(screen_name) %>%
summarise(location = first(location))
gt_tweets
obama <- rtweet::get_timeline("BarackObama", n = 3200)
biden <- rtweet::get_timeline("JoeBiden", n=3200)
tweets <- bind_rows(
obama %>% filter(is_retweet==F) %>% select(text, screen_name, created_at, retweet_count, favorite_count),
biden %>% filter(is_retweet==F) %>% select(text, screen_name, created_at, retweet_count, favorite_count)
)
obama
obama
