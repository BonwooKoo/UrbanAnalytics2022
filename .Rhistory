setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = net %>% st_as_sf('edges'), col = "gray", weight = 3, opacity = 0.9, popup = net %>% st_as_sf('edges') %>% pull(osm_id)) %>%
addCircles(data = net %>% st_as_sf('nodes'), fillColor = 'yellow',
stroke = F, radius = 20, fillOpacity = 0.7)
# Let's simplify our network
simple_net <- net %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop())
# Because the difference is not really discernible, we just print out the differences in the edge count.
message(str_c("Before simplification, there were ", net %>% st_as_sf("edges") %>% nrow(), " edges. \n",
"After simplification, there are ", simple_net %>% st_as_sf("edges") %>% nrow(), " edges."))
# # Using spatial morpher
subdiv_net <- convert(simple_net, sfnetworks::to_spatial_subdivision)
# -------------------------------------------
# Below is done for visualization purpose
# Add a flag -> This will be used for visualization purposes later
subdiv_net <- subdiv_net %>%
activate("nodes") %>%
mutate(custom_id = seq(1, subdiv_net %>% st_as_sf("nodes") %>% nrow()),
is.new = case_when(is.na(.tidygraph_node_index) ~ "new nodes",
TRUE ~ "existing nodes"),
is.new = factor(is.new))
## Plot--
subdiv_pal <- colorFactor(palette = c("yellow", "red"), domain = subdiv_net %>% st_as_sf("nodes") %>% pull(is.new))
subdiv_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = subdiv_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = subdiv_net %>% st_as_sf('nodes'), fillColor = ~subdiv_pal(is.new), stroke = F, radius = 20, fillOpacity = 0.7) %>%
addLegend(position = "bottomright", pal = subdiv_pal, values = subdiv_net %>% st_as_sf("nodes") %>% pull(is.new))
subdiv_map
# Using spatial morpher
smoothed_net <- convert(subdiv_net, sfnetworks::to_spatial_smooth)
# -------------------------------------------
# Below is done for visualization purpose
# Extract removed points for mapping purposes
removed <- setdiff(subdiv_net %>% st_as_sf('nodes') %>% pull(custom_id),
smoothed_net %>% st_as_sf('nodes') %>% pull(custom_id))
smooth_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9, popup = smoothed_net %>% st_as_sf('edges') %>% rownames()) %>%
addCircles(data = smoothed_net %>% st_as_sf('nodes'), fillColor = 'yellow', stroke = F, radius = 20, fillOpacity = 0.7, group = "kept") %>%
addCircles(data = subdiv_net %>% st_as_sf("nodes") %>% filter(custom_id %in% removed),
fillColor = "red", stroke = F, radius = 15, fillOpacity = 0.8, group = "removed") %>%
addControl(html = htmltools::HTML("<b>Red points denote removed nodes</b>"), position = "bottomright") %>%
addLayersControl(overlayGroups = c("kept", "removed"))
smooth_map
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/1/11/6_centrality_measures.png")
# Calculate centrality measures
network_char <- smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
mutate(edge_bc = centrality_edge_betweenness(weights = weight, directed = F)) %>%
activate("nodes") %>%
mutate(node_bc = centrality_betweenness(weights = weight, directed = F))
# Edge betweenness
bet_pal_edge <- colorNumeric(palette = "Reds", domain = network_char %>% activate("edges") %>% pull(edge_bc), n = 6)
# Node betweenness
bet_pal_node <- colorNumeric(palette = "Reds", domain = network_char %>% activate("nodes") %>% pull(node_bc), n = 6)
# Map
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = network_char %>% st_as_sf("edges"),
color = ~bet_pal_edge(network_char %>% st_as_sf('edges') %>% pull(edge_bc)), weight = 3, opacity = 0.7) %>%
addCircles(data = network_char %>% st_as_sf("nodes"),
fillColor = ~bet_pal_node(network_char %>% st_as_sf('nodes') %>% pull(node_bc)), stroke = F, fillOpacity = 0.7,
radius = network_char %>% st_as_sf("nodes") %>% with(.$node_bc/(max(.$node_bc)/100))) # denominator is selected to make the max value roughly equal to 100
# Change crs for convenience
smoothed_net <- smoothed_net %>% st_transform(4326)
# Start point
start_p <- st_point(c(-84.40364459476174,33.776160322717544)) %>% st_sfc(crs = 4326) # CRC at Georgia Tech
# End point
target_p1 <- st_point(c(-84.37639335217811, 33.75718076235044)) %>% st_sfc(crs = 4326) # MLK National Historical Park
target_p2 <- st_point(c(-84.36498732714422, 33.753394567879816)) %>% st_sfc(crs = 4326) # Krog Street Tunnel
# Get the shortest path
paths = st_network_paths(smoothed_net, from = start_p, to = c(target_p1, target_p2), type = "shortest")
# Extract shortest path
paths_sf1 <- smoothed_net %>%
slice(paths$node_paths[[1]])
paths_sf2 <- smoothed_net %>%
slice(paths$node_paths[[2]])
# Visualize
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
# Base network in grey
addPolylines(data = smoothed_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_sf1 %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf1 %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen edges
addPolylines(data = paths_sf2 %>% st_as_sf("edges"), color = "green", weight = 4, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf2 %>% st_as_sf("nodes"), stroke = F, fillColor = "green", fillOpacity = 0.8, radius = 50)
## Assignment: sample one point from each tract, calculate average travel time from one census tract to all others. Repeat for all tracts.
## See if there is any patterns to the accessibility.
end_points <- smoothed_net %>%
st_as_sf('nodes') %>%
st_join(smoothed_net %>% activate("edges") %>% st_as_sf())
intersections <- end_points %>%
group_by(.tidygraph_node_index) %>%
summarise(n = n()) %>%
filter(n > 1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = intersections %>% st_as_sf('nodes'), fillColor = 'red', stroke = F, radius = 20, fillOpacity = 0.7)
end_points <- smoothed_net %>%
st_as_sf('nodes') %>%
st_join(smoothed_net %>% activate("edges") %>% st_as_sf())
intersections <- end_points %>%
group_by(.tidygraph_node_index) %>%
summarise(n = n()) %>%
filter(n > 1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = intersections %>% st_as_sf('nodes'), fillColor = 'yellow', stroke = F, radius = 20, fillOpacity = 0.7)
# Get American Community Survey
census_api_key(Sys.getenv('census_api'))
acs2020 <- tidycensus::get_acs(geography = "tract",
variables = c("hhinc" = 'B19013_001',
"r_tot" = "B02001_001",
"r_wh" = "B02001_002",
"r_bl" = "B02001_003",
"tot_hh" = "B25044_001",
"own_novhc" = "B25044_003",
"rent_novhc" = "B25044_010"),
year = 2020,
output = "wide",
state = "GA",
county = c("Fulton", "DeKalb", "Clayton"),
geometry = TRUE)
acs2020
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
# Before we do the join, let's use centrality measures that were calculated on the entire network.
# It takes time, so I calculated it and saved it.
# You can read the data back in
load("D:/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_2/network_char.RData")
census_centrality <- acs2020c %>%
st_join(network_char %>% st_as_sf("nodes") %>% st_transform(crs = 4326)) %>% # When I calculated centrality measures, the CRS was 26967, so reverting it back to 4326
group_by(GEOID) %>%
summarise(n = n(),
hhinc = mean(hhinc, na.rm = T),
pct_wh = mean(pct_wh, na.rm = T),
pct_bl = mean(pct_bl, na.rm = T),
pct_novhc = mean(pct_novhc, na.rm = T),
node_bc = mean(node_bc, na.rm = T))
tm_shape(acs2020c) + tm_polygons(col = "grey", alpha = 0.5) +
tm_shape(census_centrality) + tm_polygons(col = "node_bc", style = "quantile") +
tm_shape(bb_sf) + tm_borders()
census_centrality_plot <- census_centrality %>%
mutate(hhinc = log(hhinc),
pct_novhc = log(pct_novhc + 0.02)) %>%
pivot_longer(cols = c('hhinc', 'pct_wh', 'pct_bl', 'pct_novhc'), names_to = "variable", values_to = "value") %>%
mutate(variable = factor(variable, labels = c("Household Income (logged)", "% Black", "% No HH with no cars (logged)", "% White")))
centrality_plot <- census_centrality_plot %>%
ggplot() +
geom_point(aes(x = node_bc, y = value), alpha = 0.2) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Centrality", title = "Centrality VS. Socio-demographics") +
theme_bw()
centrality_plot + ggpubr::stat_cor(aes(x = node_bc, y = value))
ggplotly(centrality_plot)
smoothed_net
?centrality_degree
smoothed_net %>%
mutate(degree = centrality_degree(weights = weight))
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = weight))
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = weight)) %>% summary(degree)
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = weight)) %>% st_as_sf("nodes") %>% summary()
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>% st_as_sf("nodes") %>% summary()
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1)
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers(data = .)
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
leaflet(data = .) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net, col= "gray")
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
leaflet(data = . %>% st_as_sf("nodes")) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net, col= "gray")
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
leaflet(data = . %>% st_as_sf("nodes")) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net %>% st_as_sf("edges"), col= "gray")
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
leaflet(data = . %>% st_as_sf("nodes")) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers()
smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
st_as_sf("nodes") %>%
leaflet(data = .) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net %>% st_as_sf("edges"), col= "gray")
smoothed_net %>%
st_transform(crs = 4326) %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
st_as_sf("nodes") %>%
leaflet(data = .) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net %>% st_as_sf("edges"), col= "gray")
smoothed_net %>%
st_transform(crs = 4326) %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
st_as_sf("nodes") %>%
leaflet(data = .) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircleMarkers() %>%
addPolylines(data = smoothed_net %>% st_as_sf("edges"), col= "gray")
smoothed_net %>%
st_transform(crs = 4326) %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
st_as_sf("nodes") %>%
tm_shape(.) + tm_dots() + tm_shape(smoothed_net) + tm_lines()
smoothed_net %>%
st_transform(crs = 4326) %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1) %>%
st_as_sf("nodes") %>%
tm_shape(.) + tm_dots() + tm_shape(smoothed_net %>% st_as_sf("edges")) + tm_lines()
intersections <- smoothed_net %>%
st_transform(crs = 4326) %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1)
tm_shape(intersections %>% st_as_sf("nodes")) + tm_dots() + tm_shape(smoothed_net %>% st_as_sf("edges")) + tm_lines()
intersections
# Import required packages
library(tidyverse)
library(tmap)
library(ggplot2)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(leafsync)
library(dbscan)
library(sfnetworks)
library(tigris)
library(tidygraph)
library(plotly)
library(osmdata)
# Get bounding box coordinates for Atlanta
bb <- getbb('Atlanta, GA')
# Converting bb into an sf object
bb_sf <- bb %>% t %>% data.frame() %>%
st_as_sf(coords = c("x", "y"), crs = 4326) %>%
st_bbox() %>%
st_as_sfc()
## Plot--
tmap_mode('view')
tm_shape(bb_sf) + tm_borders()
# Get OSM road data
osm_road <- opq(bbox = bb) %>%
add_osm_feature(key = 'highway',
value = c("motorway", "trunk", "primary",
"secondary", "tertiary", "unclassified",
"residential")) %>%
osmdata_sf() %>%
osm_poly2line()
names(osm_road)
## Plot--
tmap_mode('plot')
tm_shape(osm_road$osm_lines) + tm_lines(col = "highway")
# Breakdown of highway types
round( prop.table(table(osm_road$osm_lines$highway)) * 100, 1 )
# p1 is lower left corner, p2 is the upper right corner
p1 <- c(33.746217847959734, -84.40851957882589)
p2 <- c(33.785889694219634, -84.36354430149285)
# Custom BB
my_bb <- matrix(c(p1[2], p1[1],
p2[2], p2[1]), ncol = 2)
colnames(my_bb) <- c("min", "max")
rownames(my_bb) <- c("x", "y")
# Custom BB to sf
my_bb_sf <- my_bb %>% t %>% data.frame() %>%
st_as_sf(coords = c("x", "y"), crs = 4326) %>%
st_bbox() %>%
st_as_sfc()
# Extract a smaller network for exercise purpose
osm_small <- osm_road$osm_lines[my_bb_sf,]
## Plot--
tmap_mode('view')
tm_shape(bb_sf) + tm_borders(col = "black") +  # Black = larger bbox
tm_shape(my_bb_sf) + tm_borders(col = "red") +  # Red = smaller bbox
tm_shape(osm_small) + tm_lines(col = "black") # Black line = small network
# Converting the line component of OSM data into a network
net <- sfnetworks::as_sfnetwork(osm_small, directed = FALSE)
print(net)
## Plot--
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = net %>% st_as_sf('edges'), col = "gray", weight = 3, opacity = 0.9, popup = net %>% st_as_sf('edges') %>% pull(osm_id)) %>%
addCircles(data = net %>% st_as_sf('nodes'), fillColor = 'yellow',
stroke = F, radius = 20, fillOpacity = 0.7)
# Let's simplify our network
simple_net <- net %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop())
# Because the difference is not really discernible, we just print out the differences in the edge count.
message(str_c("Before simplification, there were ", net %>% st_as_sf("edges") %>% nrow(), " edges. \n",
"After simplification, there are ", simple_net %>% st_as_sf("edges") %>% nrow(), " edges."))
# # Using spatial morpher
subdiv_net <- convert(simple_net, sfnetworks::to_spatial_subdivision)
# -------------------------------------------
# Below is done for visualization purpose
# Add a flag -> This will be used for visualization purposes later
subdiv_net <- subdiv_net %>%
activate("nodes") %>%
mutate(custom_id = seq(1, subdiv_net %>% st_as_sf("nodes") %>% nrow()),
is.new = case_when(is.na(.tidygraph_node_index) ~ "new nodes",
TRUE ~ "existing nodes"),
is.new = factor(is.new))
## Plot--
subdiv_pal <- colorFactor(palette = c("yellow", "red"), domain = subdiv_net %>% st_as_sf("nodes") %>% pull(is.new))
subdiv_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = subdiv_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = subdiv_net %>% st_as_sf('nodes'), fillColor = ~subdiv_pal(is.new), stroke = F, radius = 20, fillOpacity = 0.7) %>%
addLegend(position = "bottomright", pal = subdiv_pal, values = subdiv_net %>% st_as_sf("nodes") %>% pull(is.new))
subdiv_map
# Using spatial morpher
smoothed_net <- convert(subdiv_net, sfnetworks::to_spatial_smooth)
# -------------------------------------------
# Below is done for visualization purpose
# Extract removed points for mapping purposes
removed <- setdiff(subdiv_net %>% st_as_sf('nodes') %>% pull(custom_id),
smoothed_net %>% st_as_sf('nodes') %>% pull(custom_id))
smooth_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9, popup = smoothed_net %>% st_as_sf('edges') %>% rownames()) %>%
addCircles(data = smoothed_net %>% st_as_sf('nodes'), fillColor = 'yellow', stroke = F, radius = 20, fillOpacity = 0.7, group = "kept") %>%
addCircles(data = subdiv_net %>% st_as_sf("nodes") %>% filter(custom_id %in% removed),
fillColor = "red", stroke = F, radius = 15, fillOpacity = 0.8, group = "removed") %>%
addControl(html = htmltools::HTML("<b>Red points denote removed nodes</b>"), position = "bottomright") %>%
addLayersControl(overlayGroups = c("kept", "removed"))
smooth_map
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/1/11/6_centrality_measures.png")
# Calculate centrality measures
network_char <- smoothed_net %>%
activate("edges") %>%
mutate(weight = edge_length()) %>%
mutate(edge_bc = centrality_edge_betweenness(weights = weight, directed = F)) %>%
activate("nodes") %>%
mutate(node_bc = centrality_betweenness(weights = weight, directed = F))
# Edge betweenness
bet_pal_edge <- colorNumeric(palette = "Reds", domain = network_char %>% activate("edges") %>% pull(edge_bc), n = 6)
# Node betweenness
bet_pal_node <- colorNumeric(palette = "Reds", domain = network_char %>% activate("nodes") %>% pull(node_bc), n = 6)
# Map
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = network_char %>% st_as_sf("edges"),
color = ~bet_pal_edge(network_char %>% st_as_sf('edges') %>% pull(edge_bc)), weight = 3, opacity = 0.7) %>%
addCircles(data = network_char %>% st_as_sf("nodes"),
fillColor = ~bet_pal_node(network_char %>% st_as_sf('nodes') %>% pull(node_bc)), stroke = F, fillOpacity = 0.7,
radius = network_char %>% st_as_sf("nodes") %>% with(.$node_bc/(max(.$node_bc)/100))) # denominator is selected to make the max value roughly equal to 100
# Change crs for convenience
smoothed_net <- smoothed_net %>% st_transform(4326)
# Start point
start_p <- st_point(c(-84.40364459476174,33.776160322717544)) %>% st_sfc(crs = 4326) # CRC at Georgia Tech
# End point
target_p1 <- st_point(c(-84.37639335217811, 33.75718076235044)) %>% st_sfc(crs = 4326) # MLK National Historical Park
target_p2 <- st_point(c(-84.36498732714422, 33.753394567879816)) %>% st_sfc(crs = 4326) # Krog Street Tunnel
# Get the shortest path
paths = st_network_paths(smoothed_net, from = start_p, to = c(target_p1, target_p2), type = "shortest")
# Extract shortest path
paths_sf1 <- smoothed_net %>%
slice(paths$node_paths[[1]])
paths_sf2 <- smoothed_net %>%
slice(paths$node_paths[[2]])
# Visualize
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
# Base network in grey
addPolylines(data = smoothed_net %>% st_as_sf("edges"), color = 'grey', weight = 2, opacity = 0.7) %>%
# Chosen edges
addPolylines(data = paths_sf1 %>% st_as_sf("edges"), color = "red", weight = 10, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf1 %>% st_as_sf("nodes"), stroke = F, fillColor = "red", fillOpacity = 0.8, radius = 50) %>%
# Chosen edges
addPolylines(data = paths_sf2 %>% st_as_sf("edges"), color = "green", weight = 4, opacity = 0.5) %>%
# Chosen nodes
addCircles(data = paths_sf2 %>% st_as_sf("nodes"), stroke = F, fillColor = "green", fillOpacity = 0.8, radius = 50)
## Assignment: sample one point from each tract, calculate average travel time from one census tract to all others. Repeat for all tracts.
## See if there is any patterns to the accessibility.
intersections <- smoothed_net %>%
st_transform(crs = 4326) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1)
tm_shape(intersections %>% st_as_sf("nodes")) + tm_dots() +
tm_shape(smoothed_net %>% st_as_sf("edges")) + tm_lines()
tm_shape(intersections %>% st_as_sf("nodes")) + tm_dots() +
tm_shape(smoothed_net %>% st_as_sf("edges")) + tm_lines()
intersections <- smoothed_net %>%
st_transform(crs = 4326) %>%
activate("nodes") %>%
mutate(degree = centrality_degree(weights = NULL)) %>%
filter(degree > 1)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
setView( -84.3854, 33.7668, zoom = 14) %>% # zooming in to show more details
addPolylines(data = smoothed_net %>% st_as_sf('edges'), col = "grey", weight = 3, opacity = 0.9) %>%
addCircles(data = intersections %>% st_as_sf('nodes'), fillColor = 'yellow', stroke = F, radius = 20, fillOpacity = 0.7)
?count
