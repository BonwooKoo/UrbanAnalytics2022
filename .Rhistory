yelp_in %>%
mutate(across(is.numeric, scale)) %>%
select(is.numeric)
my_yelp
my_yelp %>% select(id, categories, transactions, coordinates, location) %>% slice(1:10) %>% write_rds(here("Lab", "module_1" "week2", "yelp_subset.rds"))
my_yelp %>% select(id, categories, transactions, coordinates, location) %>% slice(1:10) %>% write_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
# Read a subset of Yelp data we downloaded last week
yelp_subset <- read_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
# Print to see what's inside
yelp_subset %>%
tibble() %>%
print(width = 1000)
yelp_subset$coordinates %>% head()
glue::glue("Before dropping NA, there were {nrow(my_yelp)} rows. After dropping them, there are {nrow(yelp_unique)} rows")
is.character(glue::glue("Before dropping NA, there were {nrow(my_yelp)} rows. After dropping them, there are {nrow(yelp_unique)} rows"))
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
?save.image
map(1:5, # input vector
function(x) x + 1) # anonymous function
map(1:5,
function(x){
out <- (x + 1)*x
return(out)
})
?map_lgl
point_df <- data.frame(x = c(-84.3991, -84.4010, -84.3899), y = c(33.7770, 33.7748, 33.7777))
point_df <- data.frame(x = c(-84.3991, -84.4010, -84.3899), y = c(33.7770, 33.7748, 33.7777))
xaringan:::inf_mr()
xaringan:::inf_mr()
"https://teams.microsoft.com/l/meetup-join/19%3a3a350b1c620f43cd96f8a5ec6a5c7184%40thread.tacv2/1663084901371?context=%7b%22Tid%22%3a%22482198bb-ae7b-4b25-8b7a-6d7f32faa083%22%2c%22Oid%22%3a%22f75ad2af-267d-454f-b064-83f7f6b0eae5%22%7d" == "https://teams.microsoft.com/l/meetup-join/19%3a3a350b1c620f43cd96f8a5ec6a5c7184%40thread.tacv2/1663084901371?context=%7b%22Tid%22%3a%22482198bb-ae7b-4b25-8b7a-6d7f32faa083%22%2c%22Oid%22%3a%22f75ad2af-267d-454f-b064-83f7f6b0eae5%22%7d"
xaringan:::inf_mr()
?pivot_longer
library(tidyverse)
?pivot_longer
head(census_wide)
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Open Sans"),
text_font_google   = google_font("Source Sans Pro", "400", "400i"),
code_font_google   = google_font("Fira")
)
nice_table <- function(df, height="150px"){
return(
df %>% kable() %>%
kable_styling(latex_options="scale_down", font_size=12) %>%
scroll_box(width = "100%", height = height)
)
}
library(xaringanthemer)
library(sf)
library(tidyverse)
library(leaflet)
library(tmap)
library(kableExtra)
library(tidycensus)
census_api_key(Sys.getenv("census_api"))
suppressMessages(
census_wide <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', race.tot = "B02001_001"),
county="Fulton", year=2019, output="wide", geomtry=TRUE))
suppressMessages(
census_long <- get_acs(geography="tract", state="GA", variables=c(hhincome='B19019_001', race.tot = "B02001_001"),
county="Fulton", year=2019, geomtry=TRUE))
head(census_long)
head(census_wide)
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = "variable",
values_to = "value")
census_long %>%
head() %>%
nice_table("350px")
census_long %>%
head()
census_wide %>%
pivot_longer(cols = ends_with("E"),
names_to = "estimate",
values_to = "value")
census_wide
who
census_wide
who
names(who)
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "([a-z])([A-Z])"
values_to = "value")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "([a-z])([A-Z])",
values_to = "value")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "([a-z])([A-Z])")
hhincomeE:race.totM
census_wide
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "([a-z])([A-Z])",
values_to = "value")
who
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "(.)(.)",
values_to = "value")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("estimate","moe"),
names_pattern = "(.)(.)",
values_to = c("estimate", 'moe'))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_pattern = "(.)(.)",
values_to = c("estimate", 'moe'))
census_wide
?pivot_longer
census_long
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "estimate", "moe"),
names_pattern = "(.)(.)",
values_to = c("estimate", 'moe'))
census_long
census_wide
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "estimate", "moe"),
names_pattern = "([a-z])([A-Z])",
values_to = c("estimate", 'moe'))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "estimate", "moe"),
names_pattern = "([a-z])(E) | ([a-z](M))",
values_to = c("estimate", 'moe'))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable")
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_suffix = c("E", "M"),
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "[a-z]",
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "est"),
names_sep = "[a-z]",
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "est"),
names_sep = "[a-z]",
values_to = c("estimate", "moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "[a-z]",
values_to = c("estimate", "moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])+",
values_to = c("estimate", "moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([E|M])",
values_to = c("estimate", "moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([E|M])",
values_to = c("estimate", "moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([E|M])",
values_to = "values")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "e"),
names_sep = "([a-z])([E|M])",
values_to = "values")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "e"),
names_sep = "([a-z])([E|M])",
values_to = "estimate")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([E|M])",
values_to = c("estimate","moe"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([E|M])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "e"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate"))
census_long
census_wide
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z]+)([A-Z])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z*])([A-Z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z]+)([A-Z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z]*)([A-Z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z*])([A-Z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z*])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z*])([A-Z])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z*])([A-Z]*)",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z]*)",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate","sdf"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate","sdf"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate","sdf"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable", "asdf"),
names_sep = "([a-z])([A-Z])",
values_to = c("estimate"))
census_wide
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("estimate"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(variable = stringr::str_extract(variable, "[a-z]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(variable = stringr::str_extract(variable, "[a-z]*"))
suffix = stringr::str_extract(variable, "[A-Z]*")
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
census_wide %>%
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]*")
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]*"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]*"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[E|M]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]*"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z*]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z*]"),
suffix = stringr::str_extract(variable, "[A-Z*]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z*]"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]*"),
suffix = stringr::str_extract(variable, "[A-Z]+"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]+"),
suffix = stringr::str_extract(variable, "[A-Z]+"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]"),
suffix = stringr::str_extract(variable, "[A-Z]+"))
+
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]+"),
suffix = stringr::str_extract(variable, "[A-Z]+"))
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM,
names_to = c("variable"),
values_to = c("value")) %>%
mutate(measure = stringr::str_extract(variable, "[a-z]+"),
suffix = stringr::str_extract(variable, "[A-Z]+"))
300*1*60*60*24
300*1*60*60*24*0.001
300*1*60*60*24*1e-6
census_wide %>%
pivot_longer(cols = hhincomeE:race.totM, # Cols to be affected
names_to = c("variable"), #
values_to = c("value"))
?pivot_wider
longer
longer <- census_wide %>%
pivot_longer(cols = hhincomeE:race.totM, # Cols to be affected
names_to = c("variable"), # Name for the label column
values_to = c("value")) # Name for the value column
longer
wider <- census_long %>%
pivot_wider(id_cols = c(GEOID, NAME),
names_from = c("variable"),
values_from = c("value"))
wider <- longer %>%
pivot_wider(id_cols = c(GEOID, NAME),
names_from = c("variable"),
values_from = c("value"))
wider
tfruns::training_run("D:/Dropbox (GaTech)/Work/Working/School/UA_2022/external/Lab/module_1/week2/Module1_Tidy_Yelp_Slide.Rmd")
xaringan:::inf_mr()
library(tidyverse)
library(sf)
library(here)
library(tmap)
library(tidyverse) # tidyr is included in tidyverse package.
# Toy dataset
toy_df <- data.frame(name = c("John", "Jane", "Mary"),
treatment_a = c(NA, 16, 3),
treatment_b = c(2, 11, 1),
treatment_c = c(6, 12, NA))
print(toy_df)
# pivot longer
(toy_long <- toy_df %>%
pivot_longer(cols = treatment_a:treatment_c,
names_to = 'treatment', # new column name for 'cols' in character
values_to = 'result')) # new name for the column storing the values in character
# back to wider
(toy_wide <- toy_long %>%
pivot_wider(id_cols = name, # unique identifier
names_from = treatment, # from which columns should the new column names come?
values_from = result)) # from which columns should the values come?
dupl_df <- data.frame(name = c("A", "A", "B", "C", "C", "C", "D"),
GPA = c(3.5, 3.5, 4.0, 2.0, 3.0, 3.0, 2.0))
# Base R
duplicated(dupl_df$name)
# Duplicates in column "name" removed.
dupl_df[!duplicated(dupl_df$name),]
# Returns a vector, not data frame
dupl_df %>%
distinct(name) # Try adding .keep_all = TRUE argument
# Returns a data frame
dupl_df %>%
distinct(name, GPA)
read_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
# Read a subset of Yelp data we downloaded last week
yelp_subset <- read_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
yelp_subset %>% save("C:/users/bonwo/Downloads/subset.txt")
yelp_subset %>% save(file="C:/users/bonwo/Downloads/test.txt")
load("C:/users/bonwo/Downloads/test.txt")
rm(list= ls())
load("C:/users/bonwo/Downloads/test.txt")
ls()
a <- load("C:/users/bonwo/Downloads/test.txt")
a
a <- load("C:/users/bonwo/Downloads/test.RData")
yelp_subset %>% save("C:/users/bonwo/Downloads/test.RData")
yelp_subset %>% save(file="C:/users/bonwo/Downloads/test.RData")
# Read a subset of Yelp data we downloaded last week
yelp_subset <- read_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
yelp_subset %>% save(file="C:/users/bonwo/Downloads/test.RData")
rm(list=ls())
load("C:/users/bonwo/Downloads/test.RData")
ls()
a <- load("C:/users/bonwo/Downloads/test.RData")
a
# Read a subset of Yelp data we downloaded last week
yelp_subset <- read_rds(here("Lab", "module_1", "week2", "yelp_subset.rds"))
yelp_subset
yelp_subset %>% save(file="C:/users/bonwo/Downloads/test.RData")
a <- load(file="C:/users/bonwo/Downloads/test.RData")
a
yelp_subset
load(file="C:/users/bonwo/Downloads/test.Rdata")
ls()
rm(list=ls())
load(file="C:/users/bonwo/Downloads/test.Rdata")
ls()
load(file="C:/users/bonwo/Downloads/test.Rdata")
ls()
