} #<< end of while loop
# Merge all elements in the list into a single data frame
out <- out %>% bind_rows()
return(out)
}
}
# Get data for the first tract
yelp_first_tract <- get_yelp(ready_4_yelp[1,], "yoga") %>%
as_tibble()
# Prepare a collector
yelp_all_list <- vector("list", nrow(ready_4_yelp))
# Looping through all Census Tracts
for (row in 1:nrow(ready_4_yelp)){
yelp_all_list[[row]] <- suppressMessages(get_yelp(ready_4_yelp[row,], "yoga"))
if (row %% 50 == 0){
print(paste0("Current row: ", row))
}
}
# Import required packages
library(tidytransit)
library(tidyverse)
library(tmap)
library(ggplot2)
# library(gtfsrouter)
library(here)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(plotly)
# library(igraph)
library(tidygraph)
# library(dodgr)
library(leafsync)
# source("https://raw.githubusercontent.com/BonwooKoo/gtfs_to_igraph/master/gtfs_to_igraph.R")
wd <- file.path(Sys.getenv('setwd'),"work/working/School/UA_2022/external/Lab/module_2")
setwd(eval(wd))
# This GTFS file is downloaded from
# https://opendata.atlantaregional.com/datasets/marta-gtfs-latest-feed/about
atl <- read_gtfs('MARTA_GTFS_Latest_Feed.zip')
typeof(atl)
names(atl)
print(head(atl))
atlsf <- tidytransit::gtfs_as_sf(atl, crs = 4326)
head(atlsf)
a <- leaflet(atlsf$shapes) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addPolylines(weight = 1, color = "red") %>% # add lines
addControl(htmltools::HTML("Route shapes")) # add Title
b <- leaflet(atlsf$stops) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addCircles(weight = 3, color = "red") %>% # add lines
addControl(htmltools::HTML("Stop shapes")) # add Title
leafsync::sync(a,b)
# Step 1:
stop_dist <- stop_group_distances(atlsf$stops, by='stop_name') %>%
# Step 2:
filter(dist_max > 200)
# Step 3
atl$stops <- atl$stops %>%
group_by(stop_name) %>%
mutate(stop_name = case_when(stop_name %in% stop_dist$stop_name ~ paste0(stop_name, " (", seq(1,n()), ")"),
TRUE ~ stop_name))
# Step 4
atl$transfers <- gtfsrouter::gtfs_transfer_table(atl,
d_limit = 200,
min_transfer_time = 120)
# Step 5
am_stop_time <- filter_stop_times(gtfs_obj = atl,
extract_date = "2021-08-14",
min_departure_time = 3600*7, # input unit is in second. So 3500*7 is 7AM
max_arrival_time = 3600*10)  # similarly, this is 10AM
# travel_times
trvt <- travel_times(filtered_stop_times = am_stop_time,
stop_name = "MIDTOWN STATION",
return_coords = TRUE)
# ..and visualize the output
trvt_pal <- colorQuantile(palette = "Reds", domain = trvt$travel_time)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addCircles(data = trvt %>% st_as_sf(coords = c("to_stop_lon", "to_stop_lat"), crs = 4326), # converting trvt into sf object on the fly.
fillColor = ~trvt_pal(travel_time), # Define color
stroke = F, # Turn off the outer border lines of circles
radius = 300, # Size of the circle
fillOpacity = 0.7, # Transparency
popup = paste0("Travel Time from <br> <strong> MIDTOWN: ", round(trvt$travel_time/60, 2), " minutes <strong>") %>% # Defines what's displayed on popup
lapply(htmltools::HTML))
# Average time to get to other stations
print(str_c("On average, it takes ",
round(mean(trvt$travel_time)/60,1),
" minutes to travel from the Midtown Station to all other stations."))
# Filter out rail transit
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
unique_shape <- route_trip %>%
dplyr::group_by(route_id) %>%
dplyr::slice(1) %>%
dplyr::ungroup()
route.shape <- atlsf$shape %>% inner_join(unique_shape, by = "shape_id")
# Route type is not really intuitive - let's fix that
route.shape <- route.shape %>%
dplyr::mutate(route_type = dplyr::case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
pal <- leaflet::colorFactor(c("red", "orange", "pink"), domain = route.shape$route_type)
route.shape %>%
leaflet::leaflet(data = .) %>%
leaflet::addProviderTiles(providers$CartoDB.DarkMatter) %>%
leaflet::addPolylines(color = ~pal(route_type),
weight = 3,
opacity = 0.9,
popup = paste0("Route type: ", route.shape$route_type))
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE)
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 26967) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE)
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 26967) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
pal <- colorFactor(palette = c("red", "yellow", "blue"), domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = MARTA_buffer_group %>% st_transform(crs = 4326), col = ~pal(route_type),
popup = MARTA_buffer_group$route_type)
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE)
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 4326) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
pal <- colorFactor(palette = c("red", "yellow", "blue"), domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = MARTA_buffer_group %>% st_transform(crs = 4326), col = ~pal(route_type),
popup = MARTA_buffer_group$route_type)
devtools::install_github("gadenbuie/rsthemes")
rsthemes::install_rsthemes(include_base16 = TRUE)
# Import required packages
library(tidytransit)
library(tidyverse)
library(tmap)
library(ggplot2)
# library(gtfsrouter)
library(here)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(plotly)
# library(igraph)
library(tidygraph)
# library(dodgr)
library(leafsync)
# source("https://raw.githubusercontent.com/BonwooKoo/gtfs_to_igraph/master/gtfs_to_igraph.R")
wd <- file.path(Sys.getenv('setwd'),"work/working/School/UA_2022/external/Lab/module_2")
setwd(eval(wd))
# This GTFS file is downloaded from
# https://opendata.atlantaregional.com/datasets/marta-gtfs-latest-feed/about
atl <- read_gtfs('MARTA_GTFS_Latest_Feed.zip')
typeof(atl)
names(atl)
print(head(atl))
# Converting GTFS data into sf objects
atlsf <- tidytransit::gtfs_as_sf(atl, crs = 4326)
atlsf$stops %>% head() # Notice that this is POINT
atlsf$shapes %>% head() # This is LINESTRING
# Visualize
a <- leaflet(atlsf$shapes) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addPolylines(weight = 1, color = "red") %>% # add lines
addControl(htmltools::HTML("Route shapes")) # add Title
b <- leaflet(atlsf$stops) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addCircles(weight = 3, color = "red") %>% # add circles
addControl(htmltools::HTML("Stop shapes")) # add Title
leafsync::sync(a,b)
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
route_trip
route_trip
atlsf$shape
atl$trips
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
route_trip_shape <- route_trip %>% dplyr::left_join(atl$shapes, by = "shape_id")
route_trip_shape
nrow(route_trip)
nrow(route_trip_shape)
route_trip_shape
route_trip_shape %>% print(n = 50)
trip_shape <- atl$trips %>% dplyr::left_join(atl$shapes, by = "shape_id")
trip_shape
trip_shape %>% distinct(route_id, trip_id, shape_id)
# Join routes table with trips table using 'route_id' as key
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
# For each route_id, extract only one of them
unique_shape <- route_trip %>%
dplyr::group_by(route_id) %>%
dplyr::slice(1) %>%
dplyr::ungroup()
route.shape <- atlsf$shape %>% inner_join(unique_shape, by = "shape_id")
# Route type is not really intuitive - let's fix that
route.shape <- route.shape %>%
dplyr::mutate(route_type = dplyr::case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
route.shape
route.shape
route_trip
atlsf$shapes
atlsf$shapes %>% tm_shape(.) + tm_lines()
tmap_mode('view')
atlsf$shapes %>% tm_shape(.) + tm_lines()
st_write(altsf$shapes, "C:/Users/bkoo34/Downloads/shapes.geojson")
st_write(atlsf$shapes, "C:/Users/bkoo34/Downloads/shapes.geojson")
route_trip_shape
route_trip_shape %>% distinct(route_id, trip_id, shape_id) %>% st_write("C:/Users/bkoo34/Downloads/shapes.geojson")
route_trip_shape
route_trip_shape %>% distinct(route_id, trip_id, shape_id)
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
trip_shape <- atl$trips %>% dplyr::left_join(atl$shapes, by = "shape_id")
route_trip_shape <- atlsf$shapes %>% dplyr::left_join(route_trip, by = "shape_id")
route_trip_shape
route_trip_shape <- atlsf$shapes %>% dplyr::full_join(route_trip, by = "shape_id")
route_trip_shape
route_trip <- atl$trips %>% dplyr::left_join(atl$routes, by = "route_id")
trip_shape <- atl$trips %>% dplyr::left_join(atl$shapes, by = "shape_id")
route_trip <- atl$trips %>% dplyr::full_join(atl$routes, by = "route_id")
trip_shape <- atl$trips %>% dplyr::full_join(atlsf$shapes, by = "shape_id")
route_trip <- atl$trips %>% dplyr::full_join(atl$routes, by = "route_id")
trip_shape <- atl$trips %>% dplyr::full_join(atlsf$shapes, by = "shape_id")
route_trip_shape <- trip_shape %>% dplyr::full_join(route_trip, by = "trip_id")
route_trip_shape
trip_routes <- atl$trips %>% dplyr::full_join(atl$routes, by = "route_id")
trip_shape <- atl$trips %>% dplyr::full_join(atlsf$shapes, by = "shape_id")
route_trip_shape <- trip_shape %>% dplyr::full_join(trip_routes, by = "trip_id")
route_trip_shape
trip_shape
trip_shape <- atlsf$shapes %>% dplyr::full_join(atl$trips, by = "shape_id")
trip_shape
route_trip_shape <- trip_shape %>% dplyr::full_join(trip_routes, by = "trip_id")
route_trip_shape
route_trip_shape %>% st_write("C:/Users/bkoo34/Downloads/shape.geojson")
# Import required packages
library(tidytransit)
library(tidyverse)
library(tmap)
library(ggplot2)
# library(gtfsrouter)
library(here)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(plotly)
# library(igraph)
library(tidygraph)
# library(dodgr)
library(leafsync)
# source("https://raw.githubusercontent.com/BonwooKoo/gtfs_to_igraph/master/gtfs_to_igraph.R")
wd <- file.path(Sys.getenv('setwd'),"work/working/School/UA_2022/external/Lab/module_2")
setwd(eval(wd))
# This GTFS file is downloaded from
# https://opendata.atlantaregional.com/datasets/marta-gtfs-latest-feed/about
atl <- read_gtfs('MARTA_GTFS_Latest_Feed.zip')
typeof(atl)
names(atl)
print(head(atl))
# Converting GTFS data into sf objects
atlsf <- tidytransit::gtfs_as_sf(atl, crs = 4326)
atlsf$stops %>% head() # Notice that this is POINT
atlsf$shapes %>% head() # This is LINESTRING
# Visualize
a <- leaflet(atlsf$shapes) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addPolylines(weight = 1, color = "red") %>% # add lines
addControl(htmltools::HTML("Route shapes")) # add Title
b <- leaflet(atlsf$stops) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addCircles(weight = 3, color = "red") %>% # add circles
addControl(htmltools::HTML("Stop shapes")) # add Title
leafsync::sync(a,b)
# Join routes table with trips table with shapes table
trip_routes <- atl$trips %>%
full_join(atl$routes, by = "route_id")
trip_shape <- atlsf$shapes %>%
full_join(atl$trips %>%
select(shape_id, trip_id),
by = "shape_id")
route_trip_shape <- trip_shape %>%
select(-shape_id) %>%
full_join(trip_routes, by = c("trip_id"))
# Route type is not really intuitive - let's fix that
route.shape <- route_trip_shape %>%
mutate(route_type = case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
route.shape
route.shape %>% st_set_geometry(NULL) %>% group_by(shape_id, route_id) %>% summarise(n = n())
route.shape %>% group_by(shape_id, route_id) %>% slice(1) %>% st_write("C:/Users/bkoo34/Downloads/shape_route_id.geojson")
# Join routes table with trips table with shapes table
trip_routes <- atl$trips %>%
full_join(atl$routes, by = "route_id")
trip_shape <- atlsf$shapes %>%
full_join(atl$trips %>%
select(shape_id, trip_id),
by = "shape_id")
# Merging the two into one and then taking only one row for each
# unique combination of route_id and shape_id.
route_trip_shape <- trip_shape %>%
select(-shape_id) %>%
full_join(trip_routes, by = c("trip_id")) %>%
group_by(shape_id, route_id) %>%
slice(1)
# Route type is not really intuitive - let's fix that
route.shape <- route_trip_shape %>%
mutate(route_type = case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
route.shape
pal <- leaflet::colorFactor(c("red", "orange", "pink"), domain = route.shape$route_type)
route.shape %>%
leaflet::leaflet(data = .) %>%
leaflet::addProviderTiles(providers$CartoDB.DarkMatter) %>%
leaflet::addPolylines(color = ~pal(route_type),
weight = 3,
opacity = 0.9,
popup = paste0("Route type: ", route.shape$route_type))
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE) # This is default to TRUE when we load SF package. So this code is not really needed. I added it here just to make it more explicit.
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 26967) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
MARTA_buffer
MARTA_buffer_group
pal <- colorFactor(palette = c("red", "yellow", "blue"), domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = MARTA_buffer_group %>% st_transform(crs = 4326), col = ~pal(route_type),
popup = MARTA_buffer_group$route_type)
# Get American Community Survey
tidycensus::census_api_key(Sys.getenv('census_api'))
acs2020 <- tidycensus::get_acs(geography = "tract",
variables = c("hhinc" = 'B19013_001',
"r_tot" = "B02001_001",
"r_wh" = "B02001_002",
"r_bl" = "B02001_003",
"tot_hh" = "B25044_001",
"own_novhc" = "B25044_003",
"rent_novhc" = "B25044_010"),
year = 2020,
output = "wide",
state = "GA",
county = c("Fulton", "DeKalb", "Clayton"),
geometry = TRUE)
acs2020
# Import required packages
library(tidytransit)
library(tidyverse)
library(tmap)
library(ggplot2)
# library(gtfsrouter)
library(here)
library(units)
library(sf)
library(leaflet)
library(tidycensus)
library(plotly)
# library(igraph)
library(tidygraph)
# library(dodgr)
library(leafsync)
# source("https://raw.githubusercontent.com/BonwooKoo/gtfs_to_igraph/master/gtfs_to_igraph.R")
wd <- file.path(Sys.getenv('setwd'),"work/working/School/UA_2022/external/Lab/module_2")
setwd(eval(wd))
# This GTFS file is downloaded from
# https://opendata.atlantaregional.com/datasets/marta-gtfs-latest-feed/about
atl <- read_gtfs('MARTA_GTFS_Latest_Feed.zip')
typeof(atl)
names(atl)
print(head(atl))
# Converting GTFS data into sf objects
atlsf <- tidytransit::gtfs_as_sf(atl, crs = 4326)
atlsf$stops %>% head() # Notice that this is POINT
atlsf$shapes %>% head() # This is LINESTRING
# Visualize
a <- leaflet(atlsf$shapes) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addPolylines(weight = 1, color = "red") %>% # add lines
addControl(htmltools::HTML("Route shapes")) # add Title
b <- leaflet(atlsf$stops) %>% # add data to display
addProviderTiles(providers$CartoDB.DarkMatter) %>% # add BaseMap
addCircles(weight = 3, color = "red") %>% # add circles
addControl(htmltools::HTML("Stop shapes")) # add Title
leafsync::sync(a,b)
# Join routes table with trips table with shapes table
trip_routes <- atl$trips %>%
full_join(atl$routes, by = "route_id")
trip_shape <- atlsf$shapes %>%
full_join(atl$trips %>%
select(shape_id, trip_id),
by = "shape_id")
# Merging the two into one and then taking only one row for each
# unique combination of route_id and shape_id.
route_trip_shape <- trip_shape %>%
select(-shape_id) %>%
full_join(trip_routes, by = c("trip_id")) %>%
group_by(shape_id, route_id) %>%
slice(1)
# Route type is not really intuitive - let's fix that
route.shape <- route_trip_shape %>%
mutate(route_type = case_when(
route_type == "0" ~ 'Tram, Streetcar',
route_type == "1" ~ 'Subway, Metro',
route_type == "2" ~ 'Rail',
route_type == "3" ~ 'Bus'
))
pal <- leaflet::colorFactor(c("red", "orange", "pink"), domain = route.shape$route_type)
route.shape %>%
leaflet::leaflet(data = .) %>%
leaflet::addProviderTiles(providers$CartoDB.DarkMatter) %>%
leaflet::addPolylines(color = ~pal(route_type),
weight = 3,
opacity = 0.9,
popup = paste0("Route type: ", route.shape$route_type))
# If we do not convert CRS to a projected one, the buffer may generate a ragged boundaries.
# https://r-spatial.github.io/sf/articles/sf7.html#buffers-1
# https://r-spatial.org/r/2020/06/17/s2.html#sf-10-goodbye-flat-earth-welcome-s2-spherical-geometry
sf::sf_use_s2(TRUE) # This is default to TRUE when we load SF package. So this code is not really needed. I added it here just to make it more explicit.
MARTA_buffer <- route.shape %>%
sf::st_transform(crs = 26967) %>%
sf::st_buffer(dist = units::set_units(400, "m"))
# To union the buffer polygons by route_type
MARTA_buffer_group <- MARTA_buffer %>%
group_by(route_type) %>%
summarise()
pal <- colorFactor(palette = c("red", "yellow", "blue"), domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(data = MARTA_buffer_group %>% st_transform(crs = 4326), col = ~pal(route_type),
popup = MARTA_buffer_group$route_type)
acs2020c <- acs2020 %>%
select(GEOID,
hhinc = hhincE,
r_tot = r_totE,
r_wh = r_whE,
r_bl = r_blE,
tot_hh = tot_hhE,
own_novhc = own_novhcE,
rent_novhc = rent_novhcE) %>%
mutate(pct_wh = r_wh / r_tot,
pct_bl = r_bl / r_tot,
pct_novhc = (own_novhc + rent_novhc)/tot_hh) %>%
mutate(area1 = unclass(st_area(.))) %>%
st_transform(26967) %>%
mutate(area2 = unclass(st_area(.))) %>%
st_transform(crs = 4326) %>%
mutate(ln_pop_den = log((r_tot / (area1/1000^2)) + 1)) %>%
filter(!is.na(hhinc), !is.na(r_tot), !is.na(own_novhc))
pal1 <- colorNumeric(palette = "YlOrRd", domain = acs2020c$hhinc)
pal2 <- colorFactor("Spectral", domain = MARTA_buffer_group$route_type)
leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addPolygons(group = "ACS",
data = acs2020c,
color = "grey",
fillColor = ~pal1(hhinc),
fillOpacity = 0.5,
weight = 1,
popup = leafpop::popupTable(round(st_drop_geometry(acs2020c[,c("hhinc", "pct_wh", "pct_bl")]),2))) %>%
addPolygons(group = "MARTA",
data = MARTA_buffer_group %>%
st_transform(crs = st_crs(acs2020c)),
color = ~pal2(route_type),
weight = 1,
opacity = 0.9) %>%
addLayersControl(
overlayGroups = c("ACS", "MARTA"),
options = layersControlOptions(collapsed = FALSE)
)
