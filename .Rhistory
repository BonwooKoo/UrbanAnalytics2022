key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
furl
furl
location <- paste0(iterrow$Y, ",", iterrow$X)
heading <- iterrow$azi
edge_id <- iterrow$edge_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
furl
fname <- glue::glue("GSV_{}_{heading}_{highway}_{edge_id}.jpg")
fname
fname
fname <- glue::glue("GSV_{}_{heading}_{highway}_{edge_id}.jpg")
fname
glue::glue("GSV_{location}_{heading}_{highway}_{edge_id}.jpg")
fname <- glue::glue("GSV_Location-{location}_heading-{heading}_highway-{highway}_id-{edge_id}.jpg")
fname
fname <- glue::glue("GSV-Location_{location}-heading_{heading}-highway_{highway}-id_{edge_id}.jpg")
fname
fpath <- here("Lab", "module_3", fname)
fpath
download.file(furl, fpath, mode = 'wb')
endp
segment <- endp %>% filter(edge_id == 100)
segment
segment <- endp %>% filter(edge_id == 100)
for (i in seq_along(segment)){
printI
}
print(i)
for (i in seq_along(segment)){
print(i)
}
segment
for (i in seq(1,nrow(segment))){
print(i)
}
segment <- endp %>% filter(edge_id == 100)
segment <- endp %>% filter(edge_id == 100)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
get_image <- function(iterrow){
location <- paste0(iterrow$Y, ",", iterrow$X)
heading <- iterrow$azi
edge_id <- iterrow$edge_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-Location_{location}-heading_{heading}-highway_{highway}-id_{edge_id}.jpg")
fpath <- here("Lab", "module_3", fname)
download.file(furl, fpath, mode = 'wb')
}
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
edges
st_write(edges, "C:/Users/bonwo/Downloads/edges.geojson", delete_dsn = T)
test_id <- 24989
segment <- endp %>% filter(edge_id == 24989)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
edges
line
edges
get_azi <- function(line){
# end point 1 ----------------------------------------------
start_p <- line %>%
st_coordinates() %>%
.[1:2,1:2]
start_azi <- atan2(start_p[2,"X"] - start_p[1, "X"],
start_p[2,"Y"] - start_p[1, "Y"])*180/pi
# end point 2 ----------------------------------------------
end_p <- line %>%
st_coordinates() %>%
.[(nrow(.)-1):nrow(.),1:2]
end_azi <- atan2(end_p[2,"X"] - end_p[1, "X"],
end_p[2,"Y"] - end_p[1, "Y"])*180/pi
end_azi <- if (end_azi < 180) {end_azi + 180} else {end_azi - 180}
# mid point 1 ---------------------------------------------
mid_p <- line %>%
st_line_sample(sample = c(0.45, 0.55)) %>%
st_cast("POINT") %>%
st_coordinates()
mid_azi <- atan2(mid_p[2,"X"] - mid_p[1, "X"],
mid_p[2,"Y"] - mid_p[1, "Y"])*180/pi
mid_p <- line %>%
st_line_sample(sample = 0.5) %>%
st_coordinates() %>%
.[1,1:2]
# return in data frame ------------------------------------
return(tribble(
~type,    ~X,            ~Y,             ~azi,
"start",   start_p[1,"X"], start_p[1,"Y"], start_azi,
"mid1",    mid_p["X"],   mid_p["Y"],   mid_azi,
"mid2",    mid_p["X"],   mid_p["Y"],   ifelse(mid_azi < 180, mid_azi + 180, mid_azi - 180),
"end",     end_p[2,"X"],   end_p[2,"Y"],   end_azi))
}
endp_azi <- edges %>%
st_geometry() %>%
map_df(get_azi)
endp <- endp_azi %>%
cbind(edges %>% st_drop_geometry() %>% .[rep(1:nrow(edges),each=4),]) %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, remove=FALSE)
st_write(endp, "C:/Users/bonwo/Downloads/endp.geojson", delete_dsn = T)
st_write(edges, "C:/Users/bonwo/Downloads/edges.geojson", delete_dsn = T)
get_image <- function(iterrow){
type = iterrow$type
location <- paste0(iterrow$Y, ",", iterrow$X)
heading <- iterrow$azi
edge_id <- iterrow$edge_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-id_{edge_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("Lab", "module_3", fname)
download.file(furl, fpath, mode = 'wb')
}
endp
get_image <- function(iterrow){
type = iterrow$type
location <- paste0(iterrow$Y, ",", iterrow$X)
heading <- iterrow$azi
edge_id <- iterrow$edge_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-id_{edge_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("Lab", "module_3", fname)
download.file(furl, fpath, mode = 'wb')
}
segment <- endp %>% filter(edge_id == 24989)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
segment <- endp %>% filter(edge_id == 100)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
segment <- endp %>% filter(edge_id == 10000)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
#devtools::install_github("bnosac/image", subdir = "image.darknet", build_vignettes = TRUE)
library(image.darknet)
#Define Model - here it is Tiny Yolo
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "voc.names"))
yolo_tiny_voc
here()
here()
#Image Detection
img_list <- here("Lab", "module_3")
img_list
#Image Detection
img_list <- list.files(here("Lab", "module_3"), pattern=".jpg")
img_list
detection
?image_darknet_detect
#Image Detection
img_list <- list.files(here("Lab", "module_3"), pattern=".jpg")
img_list[1]
#Image Detection
img_list <- list.files(here("Lab", "module_3"), pattern=".jpg")
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[1]),
object = yolo_tiny_voc)
detection
detection
f <- system.file(package="image.darknet", "include", "darknet", "data", "voc.names")
f
labels <- readLines(f)
labels
#Define Model - here it is Tiny Yolo
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "voc.names"))
#Define Model - here it is Tiny Yolo
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "voc.names"))
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[1]),
object = yolo_tiny_voc)
detection
file.path(system.file(package="image.darknet", "models"), "yolo.weights")
weights <- file.path(system.file(package="image.darknet", "models"), "yolo.weights")
download.file(url = "http://pjreddie.com/media/files/yolo.weights", destfile = weights)
yolo_coco <- image_darknet_model(type = 'detect',
model = "yolo.cfg",
weights = system.file(package="image.darknet", "models", "yolo.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "coco.names"))
yolo_coco
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[1]),
object = yolo_coco)
detection
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[3]),
object = yolo_coco)
detection
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[4]),
object = yolo_coco)
img_list
img_list[4]
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[4]),
object = yolo_coco)
segment <- endp %>% filter(edge_id == 1000)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
#Image Detection
img_list <- list.files(here("Lab", "module_3"), pattern=".jpg")
img_list
img_list[6]
f <- system.file(package="image.darknet", "include", "darknet", "data", "voc.names")
labels <- readLines(f)
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_coco)
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc)
detection
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_coco)
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc)
detection
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc,
threshold = 0.19)
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc,
threshold = 0.19)
?image_darknet_detect
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc,
threshold = 0.2)
segment <- endp %>% filter(edge_id == 24898)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
ls()
test_id
segment <- endp %>% filter(edge_id == 24989)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
segment <- endp %>% filter(edge_id == 16261)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
detection
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc,
threshold = 0.2)
detection
?image.darknet
??image.darknet
?invisible
detection <- image_darknet_detect(file = here("Lab", "module_3", img_list[6]),
object = yolo_tiny_voc,
threshold = 0.2)
library(tidyverse)
library(osmdata)
library(sfnetworks)
library(units)
library(sf)
library(tidygraph)
library(tmap)
library(here)
bb_atl <- getbb("Atlanta,GA")
osm_road <- opq(bbox = bb_atl) %>%
add_osm_feature(key = 'highway',
value = c("motorway", "trunk", "primary",
"secondary", "tertiary", "unclassified",
"residential")) %>%
osmdata_sf() %>%
osm_poly2line()
net <- sfnetworks::as_sfnetwork(osm_road$osm_lines ,directed = FALSE) %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(., sfnetworks::to_spatial_subdivision) %>%
convert(., sfnetworks::to_spatial_smooth) %>%
mutate(legnth = edge_length())
edges <- net %>%
st_as_sf("edges") %>%
select(osm_id, highway) %>%
mutate(length = st_length(.) %>% unclass()) %>%
filter(length > 100) %>%
mutate(edge_id = seq(1,nrow(.)))
nodes <- net %>%
st_as_sf("nodes") %>%
mutate(node_id = seq(1,nrow(.)))
start_p <- edges$geometry[[100]] %>%
st_coordinates() %>%
.[1:2,1:2]
start_azi <- atan2(start_p[2,"X"] - start_p[1, "X"],
start_p[2,"Y"] - start_p[1, "Y"])*180/pi
end_p <- edges$geometry[[100]] %>%
st_coordinates() %>%
.[(nrow(.)-1):nrow(.),1:2]
end_azi <- atan2(end_p[2,"X"] - end_p[1, "X"],
end_p[2,"Y"] - end_p[1, "Y"])*180/pi
get_azi <- function(line){
# end point 1 ----------------------------------------------
start_p <- line %>%
st_coordinates() %>%
.[1:2,1:2]
start_azi <- atan2(start_p[2,"X"] - start_p[1, "X"],
start_p[2,"Y"] - start_p[1, "Y"])*180/pi
# end point 2 ----------------------------------------------
end_p <- line %>%
st_coordinates() %>%
.[(nrow(.)-1):nrow(.),1:2]
end_azi <- atan2(end_p[2,"X"] - end_p[1, "X"],
end_p[2,"Y"] - end_p[1, "Y"])*180/pi
end_azi <- if (end_azi < 180) {end_azi + 180} else {end_azi - 180}
# mid point 1 ---------------------------------------------
mid_p <- line %>%
st_line_sample(sample = c(0.45, 0.55)) %>%
st_cast("POINT") %>%
st_coordinates()
mid_azi <- atan2(mid_p[2,"X"] - mid_p[1, "X"],
mid_p[2,"Y"] - mid_p[1, "Y"])*180/pi
mid_p <- line %>%
st_line_sample(sample = 0.5) %>%
st_coordinates() %>%
.[1,1:2]
# return in data frame ------------------------------------
return(tribble(
~type,    ~X,            ~Y,             ~azi,
"start",   start_p[1,"X"], start_p[1,"Y"], start_azi,
"mid1",    mid_p["X"],   mid_p["Y"],   mid_azi,
"mid2",    mid_p["X"],   mid_p["Y"],   ifelse(mid_azi < 180, mid_azi + 180, mid_azi - 180),
"end",     end_p[2,"X"],   end_p[2,"Y"],   end_azi))
}
endp_azi <- edges %>%
st_geometry() %>%
map_df(get_azi)
endp <- endp_azi %>%
cbind(edges %>% st_drop_geometry() %>% .[rep(1:nrow(edges),each=4),]) %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, remove=FALSE) %>%
mutate(node_id = seq(1, nrow(.)))
st_write(endp, "C:/Users/bonwo/Downloads/endp.geojson", delete_dsn = T)
```{r}
get_image <- function(iterrow){
type = iterrow$type
location <- paste0(iterrow$Y %>% round(4), ",", iterrow$X %>% round(4))
heading <- iterrow$azi %>% round(1)
edge_id <- iterrow$edge_id
node_id <- iterrow$node_id
highway <- iterrow$highway
key <- Sys.getenv("google_api")
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-eid_{edge_id}-nid_{node_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("Lab", "module_3", "downloaded_image", fname)
download.file(furl, fpath, mode = 'wb')
}
segment <- endp %>% filter(edge_id == 16261)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
get_image <- function(iterrow){
type = iterrow$type
location <- paste0(iterrow$Y %>% round(4), ",", iterrow$X %>% round(4))
heading <- iterrow$azi %>% round(1)
edge_id <- iterrow$edge_id
node_id <- iterrow$node_id
highway <- iterrow$highway
key <- "AIzaSyDeL-sbZ30WPpVedJXIJNEZVx4BgtYo698"
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-eid_{edge_id}-nid_{node_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("Lab", "module_3", "downloaded_image", fname)
download.file(furl, fpath, mode = 'wb')
}
segment <- endp %>% filter(edge_id == 16261)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
get_image <- function(iterrow){
type = iterrow$type
location <- paste0(iterrow$Y %>% round(4), ",", iterrow$X %>% round(4))
heading <- iterrow$azi %>% round(1)
edge_id <- iterrow$edge_id
node_id <- iterrow$node_id
highway <- iterrow$highway
key <- "AIzaSyDeL-sbZ30WPpVedJXIJNEZVx4BgtYo698"
furl <- glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={location}&heading={heading}&fov=90&pitch=0&key={key}")
fname <- glue::glue("GSV-nid_{node_id}-eid_{edge_id}-type_{type}-Location_{location}-heading_{heading}-highway_{highway}.jpg")
fpath <- here("Lab", "module_3", "downloaded_image", fname)
download.file(furl, fpath, mode = 'wb')
}
segment <- endp %>% filter(edge_id == 16261)
for (i in seq(1,nrow(segment))){
get_image(segment[i,])
}
edges
endp
pred_output <- read.csv(here("Lab", "module_3", "pred", "pspnet_out.csv"))
pred_output
endp
pred <- endp %>%
left_join(pred_output, by = c("node_id" = id))
endp
pred <- endp %>%
left_join(pred_output, by = c("node_id" = "id"))
pred
pred_output <- read.csv(here("Lab", "module_3", "pred", "seg_out.csv"))
pred_output <- read.csv(here("Lab", "module_3", "pred", "seg_output.csv"))
pred <- endp %>%
left_join(pred_output, by = "node_id" = "id")
pred <- endp %>%
left_join(pred_output, by = "node_id")
pred %>% endp
endp
pred_output
pred_output <- read.csv(here("Lab", "module_3", "pred", "seg_output.csv"))
pred <- endp %>%
left_join(pred_output, by = "node_id")
pred
pred %>% filter(!is.na(tray))
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
library(tidyverse)
library(osmdata)
library(sfnetworks)
library(units)
library(sf)
library(tidygraph)
library(tmap)
library(here)
bb_atl <- getbb("Atlanta,GA")
osm_road <- opq(bbox = bb_atl) %>%
add_osm_feature(key = 'highway',
value = c("motorway", "trunk", "primary",
"secondary", "tertiary", "unclassified",
"residential")) %>%
osmdata_sf() %>%
osm_poly2line()
net <- sfnetworks::as_sfnetwork(osm_road$osm_lines ,directed = FALSE) %>%
activate("edges") %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(., sfnetworks::to_spatial_subdivision) %>%
convert(., sfnetworks::to_spatial_smooth) %>%
mutate(legnth = edge_length())
edges <- net %>%
st_as_sf("edges") %>%
select(osm_id, highway) %>%
mutate(length = st_length(.) %>% unclass()) %>%
filter(length > 100) %>%
mutate(edge_id = seq(1,nrow(.)))
nodes <- net %>%
st_as_sf("nodes") %>%
mutate(node_id = seq(1,nrow(.)))
start_p <- edges$geometry[[100]] %>%
st_coordinates() %>%
.[1:2,1:2]
start_azi <- atan2(start_p[2,"X"] - start_p[1, "X"],
start_p[2,"Y"] - start_p[1, "Y"])*180/pi
end_p <- edges$geometry[[100]] %>%
st_coordinates() %>%
.[(nrow(.)-1):nrow(.),1:2]
end_azi <- atan2(end_p[2,"X"] - end_p[1, "X"],
end_p[2,"Y"] - end_p[1, "Y"])*180/pi
get_azi <- function(line){
# end point 1 ----------------------------------------------
start_p <- line %>%
st_coordinates() %>%
.[1:2,1:2]
start_azi <- atan2(start_p[2,"X"] - start_p[1, "X"],
start_p[2,"Y"] - start_p[1, "Y"])*180/pi
# end point 2 ----------------------------------------------
end_p <- line %>%
st_coordinates() %>%
.[(nrow(.)-1):nrow(.),1:2]
end_azi <- atan2(end_p[2,"X"] - end_p[1, "X"],
end_p[2,"Y"] - end_p[1, "Y"])*180/pi
end_azi <- if (end_azi < 180) {end_azi + 180} else {end_azi - 180}
# mid point 1 ---------------------------------------------
mid_p <- line %>%
st_line_sample(sample = c(0.45, 0.55)) %>%
st_cast("POINT") %>%
st_coordinates()
mid_azi <- atan2(mid_p[2,"X"] - mid_p[1, "X"],
mid_p[2,"Y"] - mid_p[1, "Y"])*180/pi
mid_p <- line %>%
st_line_sample(sample = 0.5) %>%
st_coordinates() %>%
.[1,1:2]
# return in data frame ------------------------------------
return(tribble(
~type,    ~X,            ~Y,             ~azi,
"start",   start_p[1,"X"], start_p[1,"Y"], start_azi,
"mid1",    mid_p["X"],   mid_p["Y"],   mid_azi,
"mid2",    mid_p["X"],   mid_p["Y"],   ifelse(mid_azi < 180, mid_azi + 180, mid_azi - 180),
"end",     end_p[2,"X"],   end_p[2,"Y"],   end_azi))
}
endp_azi <- edges %>%
st_geometry() %>%
map_df(get_azi)
endp <- endp_azi %>%
cbind(edges %>% st_drop_geometry() %>% .[rep(1:nrow(edges),each=4),]) %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, remove=FALSE) %>%
mutate(node_id = seq(1, nrow(.)))
st_write(endp, "C:/Users/bonwo/Downloads/endp.geojson", delete_dsn = T)
