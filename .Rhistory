sj
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating))
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggdark::dark_theme_gray()
plotly::ggplotly(gplot)
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value))
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value)) +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggdark::dark_theme_gray()
gplot
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value), method="lm") +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggdark::dark_theme_gray()
plotly::ggplotly(gplot)
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating))
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating), position = 'stack')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating), position = 'fill')
sj
?cut
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(pct_white, probs = c(0,.33,.66,1)), include.lowest=T))
quantile(sj$pct_white)
quantile(sj$pct_white, na.rm=T)
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(pct_white, probs = c(0,.33,.66,1), na.rm=T), include.lowest=T))
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(pct_white, na.rm=T), include.lowest=T))
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T), include.lowest=T))
sj$cut_white %>% table
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T))
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T),
cut_white = factor(cut_white, ordered = T))
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T),
cut_white = as_factor(cut_white, ordered = T))
?cut
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")),
cut_white = factor(cut_white, ordered = T))
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
drop_na(id) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")),
cut_white = factor(cut_white, ordered = T))
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high"))) %>%
mutate(cut_white = factor(cut_white, ordered = T))
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")))
sj$cut_white
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(poi_per_pop = yelp_n/race.tot) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")), ordered_result=T)
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj)+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# Spatial join
sj
sj$cut_white
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% mutate(cut_white = factor(cut_white, ordered=T)))+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% mutate(cut_white = factor(cut_white, ordered=T)))+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = rds %>% mutate(cut_white = factor(cut_white, ordered=T)))+
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value), method="lm") +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggdark::dark_theme_gray()
plotly::ggplotly(gplot)
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
gplot <- sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value), method="lm") +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggpubr::stat_cor(aes(x = review_count_log, y = value)) +
ggdark::dark_theme_gray()
# Q1. Re-produce the following chart as closely as possible.
# If you can re-label hhincome, pct_pov, pct_white, and race.tot to
# Household Income, Percent Under Poverty, Percent White, and Total Population, that would be a plus.
sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = review_count_log, y = value, color = county)) +
geom_smooth(mapping = aes(x = review_count_log, y = value), method="lm") +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggpubr::stat_cor(aes(x = review_count_log, y = value)) +
ggdark::dark_theme_gray()
sj %>%
pivot_longer(cols = c(pct_pov, hhincome, pct_white, race.tot), names_to = "variable", values_to = "value") %>%
ggplot(data = .) +
geom_point(mapping = aes(x = poi_per_pop, y = value, color = county)) +
geom_smooth(mapping = aes(x = poi_per_pop, y = value), method="lm") +
facet_wrap(~variable, scales = "free_y") +
labs(x = "Review Count Logged", y = "Values", color = "County",
title = "Scatterplot between logged review count & neighborhood characteristics",
subtitle = "Using Yelp data in Fulton and DeKalb County, GA") +
ggpubr::stat_cor(aes(x = poi_per_pop, y = value)) +
ggdark::dark_theme_gray()
summary(sj$poi_per_pop)
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")), ordered_result=T)
# ------------------------------------------------------------------------------
# # Scatterplot vs. rating
ggplot(data=sj) +
geom_point(mapping = aes(x = pct_pov, y = rating))
ggplot(data=sj) +
geom_point(mapping = aes(x = hhincome, y = rating))
ggplot(data=sj) +
geom_point(mapping = aes(x = hhincome_log, y = rating))
#### Tract polygons for the Yelp query
tract <- suppressMessages(
get_acs(geography = "tract", # or "block group", "county", "state" etc.
state = "GA",
county = c("Fulton", "Dekalb"),
variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003',
pov1 = "C17002_002",
pov2 = "C17002_003",
pov.tot = "C17002_001"
),
year = 2019,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") # wide vs. long
)
# mutate tract
tract <- tract %>%
mutate(GEOID = GEOID,
NAME = NAME,
race.tot = race.totE,
hhincome = hhincomeE,
pct_white = race.whiteE/race.totE,
pct_pov = (pov1E+pov2E)/pov.totE,
hhincome_log = log(hhincome+10)) %>%
separate(col = NAME, into=c('tract','county','state'), sep=", ")
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")), ordered_result=T)
# ------------------------------------------------------------------------------
# # Scatterplot vs. rating
ggplot(data=sj) +
geom_point(mapping = aes(x = pct_pov, y = rating))
library(tidyverse)
library(sf)
library(tidycensus)
library(here)
dd <- read_rds(here("Lab", "module_1", "week1", "yelp_restaurants.rds"))
taly <- dd %>%
distinct(id, .keep_all = T) %>%
jsonlite::flatten() %>%
drop_na(coordinates.longitude) %>%
st_as_sf(coords = c("coordinates.longitude", "coordinates.latitude"), crs = 4326) %>%
filter(location.city %in% c('Tucker','Lithonia','Stone Mountain','Roswell','Decatur','Alpharetta','Atlanta','Suwanee','Johns Creek','Doraville','Norcross')) %>%
group_by(location.city) %>%
tally() %>%
arrange(desc(n))
rds <- dd %>%
distinct(id, .keep_all = T) %>%
jsonlite::flatten() %>%
drop_na(coordinates.longitude) %>%
st_as_sf(coords = c("coordinates.longitude", "coordinates.latitude"), crs = 4326) %>%
filter(location.city %in% c('Tucker','Lithonia','Stone Mountain','Roswell','Decatur','Alpharetta','Atlanta','Suwanee','Johns Creek','Doraville','Norcross')) %>%
mutate(location.city = factor(location.city, levels = taly$location.city)) %>%
mutate(yelp_n = 1) %>%
mutate(price = nchar(price)) %>%
mutate(product = price*review_count) %>%
mutate(review_count_log = log(review_count+1))
#### Tract polygons for the Yelp query
tract <- suppressMessages(
get_acs(geography = "tract", # or "block group", "county", "state" etc.
state = "GA",
county = c("Fulton", "Dekalb", "Clayton", "Cobb", "Gwinnett"),
variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003',
pov1 = "C17002_002",
pov2 = "C17002_003",
pov.tot = "C17002_001"
),
year = 2019,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") # wide vs. long
)
# mutate tract
tract <- tract %>%
mutate(GEOID = GEOID,
NAME = NAME,
race.tot = race.totE,
hhincome = hhincomeE,
pct_white = race.whiteE/race.totE,
pct_pov = (pov1E+pov2E)/pov.totE,
hhincome_log = log(hhincome+10)) %>%
separate(col = NAME, into=c('tract','county','state'), sep=", ")
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high")), ordered_result=T)
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% mutate(cut_white = factor(cut_white))) +
geom_bar(mapping = aes(x = rating, fill=cut_white), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% mutate(cut_white = factor(cut_white))) +
geom_bar(mapping = aes(x = county, fill=rating), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj) +
geom_bar(mapping = aes(x = county, fill=factor(rating)), position = 'fill')
yelp
dd
tm_shape(rds) + tm_dots()
library(tmap)
tmap_mode('view')
tm_shape(rds) + tm_dots()
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj) +
geom_bar(mapping = aes(x = county, fill=factor(rating)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj) +
geom_bar(mapping = aes(x = county, fill=factor(rating, ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(rating, ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(price, ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(round(price,0), ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(round(price,1), ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(price)) +
geom_bar(mapping = aes(x = county, fill=factor(round(price,1), ordered=T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(round(rating,1), ordered=T)), position = 'fill')
geom_bar(mapping = aes(x = county, fill=factor(rating), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(rating)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = county, fill=factor(rating, ordered =T)), position = 'fill')
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = rating), position = 'fill') +
facet_wrap(~county)
# ------------------------------------------------------------------------------
# Barplot
ggplot(data = sj %>% drop_na(rating)) +
geom_bar(mapping = aes(x = rating), position = 'stack') +
facet_wrap(~county)
sj
dd <- read_rds(here("Lab", "module_1", "week1", "yelp_restaurants.rds"))
taly <- dd %>%
distinct(id, .keep_all = T) %>%
jsonlite::flatten() %>%
drop_na(coordinates.longitude) %>%
st_as_sf(coords = c("coordinates.longitude", "coordinates.latitude"), crs = 4326) %>%
filter(location.city %in% c('Tucker','Lithonia','Stone Mountain','Roswell','Decatur','Alpharetta','Atlanta','Suwanee','Johns Creek','Doraville','Norcross')) %>%
group_by(location.city) %>%
tally() %>%
arrange(desc(n))
rds <- dd %>%
distinct(id, .keep_all = T) %>%
jsonlite::flatten() %>%
drop_na(coordinates.longitude) %>%
st_as_sf(coords = c("coordinates.longitude", "coordinates.latitude"), crs = 4326) %>%
filter(location.city %in% c('Tucker','Lithonia','Stone Mountain','Roswell','Decatur','Alpharetta','Atlanta','Suwanee','Johns Creek','Doraville','Norcross')) %>%
mutate(location.city = factor(location.city, levels = taly$location.city)) %>%
mutate(yelp_n = 1) %>%
mutate(price = nchar(price)) %>%
mutate(product = price*review_count) %>%
mutate(review_count_log = log(review_count+1))
#### Tract polygons for the Yelp query
tract <- suppressMessages(
get_acs(geography = "tract", # or "block group", "county", "state" etc.
state = "GA",
county = c("Fulton", "Dekalb", "Clayton", "Cobb", "Gwinnett"),
variables = c(hhincome = 'B19019_001',
race.tot = "B02001_001",
race.white = "B02001_002",
race.black = 'B02001_003',
pov1 = "C17002_002",
pov2 = "C17002_003",
pov.tot = "C17002_001"
),
year = 2019,
survey = "acs5", # American Community Survey 5-year estimate
geometry = TRUE, # returns sf objects
output = "wide") # wide vs. long
)
# mutate tract
tract <- tract %>%
mutate(GEOID = GEOID,
NAME = NAME,
race.tot = race.totE,
hhincome = hhincomeE,
pct_white = race.whiteE/race.totE,
pct_pov = (pov1E+pov2E)/pov.totE,
hhincome_log = log(hhincome+10)) %>%
separate(col = NAME, into=c('tract','county','state'), sep=", ")
# Spatial join
sj <- tract %>%
st_join(rds %>% st_transform(crs = st_crs(tract))) %>%
group_by(GEOID, county) %>%
summarise(across(c(hhincome, pct_pov, review_count, rating, race.tot, price, pct_white, hhincome_log, product, review_count_log), ~mean(.x, na.rm=T)),
yelp_n = sum(yelp_n))  %>%
mutate(rating = round(rating,0)) %>%
mutate(cut_white = cut(pct_white, breaks = quantile(.$pct_white, na.rm=T, probs = c(0, .33, .66, 1)), include.lowest=T, labels = c("low", "med", "high"), ordered_result=T))
sj
